{"/home/travis/build/npmtest/node-npmtest-squel/test.js":"/* istanbul instrument in package npmtest_squel */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-squel/lib.npmtest_squel.js":"/* istanbul instrument in package npmtest_squel */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_squel = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_squel = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-squel/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-squel && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_squel */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_squel\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_squel.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_squel.rollup.js'] =\n            local.assetsDict['/assets.npmtest_squel.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_squel.__dirname + '/lib.npmtest_squel.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-squel/node_modules/squel/dist/squel.js":";(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.squel = factory();\n  }\n}(this, function() {\n'use strict';\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// append to string if non-empty\nfunction _pad(str, pad) {\n  return str.length ? str + pad : str;\n}\n\n// Extend given object's with other objects' properties, overriding existing ones if necessary\nfunction _extend(dst) {\n  for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    sources[_key - 1] = arguments[_key];\n  }\n\n  if (dst && sources) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      var _loop = function _loop() {\n        var src = _step.value;\n\n        if ((typeof src === 'undefined' ? 'undefined' : _typeof(src)) === 'object') {\n          Object.getOwnPropertyNames(src).forEach(function (key) {\n            dst[key] = src[key];\n          });\n        }\n      };\n\n      for (var _iterator = sources[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        _loop();\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n\n  return dst;\n};\n\n// get whether object is a plain object\nfunction _isPlainObject(obj) {\n  return obj && obj.constructor.prototype === Object.prototype;\n};\n\n// get whether object is an array\nfunction _isArray(obj) {\n  return obj && obj.constructor.prototype === Array.prototype;\n};\n\n// clone given item\nfunction _clone(src) {\n  if (!src) {\n    return src;\n  }\n\n  if (typeof src.clone === 'function') {\n    return src.clone();\n  } else if (_isPlainObject(src) || _isArray(src)) {\n    var _ret2 = function () {\n      var ret = new src.constructor();\n\n      Object.getOwnPropertyNames(src).forEach(function (key) {\n        if (typeof src[key] !== 'function') {\n          ret[key] = _clone(src[key]);\n        }\n      });\n\n      return {\n        v: ret\n      };\n    }();\n\n    if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === \"object\") return _ret2.v;\n  } else {\n    return JSON.parse(JSON.stringify(src));\n  }\n};\n\n/**\n * Register a value type handler\n *\n * Note: this will override any existing handler registered for this value type.\n */\nfunction _registerValueHandler(handlers, type, handler) {\n  var typeofType = typeof type === 'undefined' ? 'undefined' : _typeof(type);\n\n  if (typeofType !== 'function' && typeofType !== 'string') {\n    throw new Error(\"type must be a class constructor or string\");\n  }\n\n  if (typeof handler !== 'function') {\n    throw new Error(\"handler must be a function\");\n  }\n\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = handlers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var typeHandler = _step2.value;\n\n      if (typeHandler.type === type) {\n        typeHandler.handler = handler;\n\n        return;\n      }\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  handlers.push({\n    type: type,\n    handler: handler\n  });\n};\n\n/**\n * Get value type handler for given type\n */\nfunction getValueHandler(value, localHandlers, globalHandlers) {\n  return _getValueHandler(value, localHandlers) || _getValueHandler(value, globalHandlers);\n};\n\nfunction _getValueHandler(value, handlers) {\n  for (var i = 0; i < handlers.length; i++) {\n    var typeHandler = handlers[i];\n    // if type is a string then use `typeof` or else use `instanceof`\n    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === typeHandler.type || typeof typeHandler.type !== 'string' && value instanceof typeHandler.type) {\n      return typeHandler.handler;\n    }\n  }\n};\n\n/**\n * Build base squel classes and methods\n */\nfunction _buildSquel() {\n  var flavour = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];\n\n  var cls = {\n    // Get whether obj is a query builder\n    isSquelBuilder: function isSquelBuilder(obj) {\n      return obj && !!obj._toParamString;\n    }\n  };\n\n  // Get whether nesting should be applied for given item\n  var _shouldApplyNesting = function _shouldApplyNesting(obj) {\n    return !cls.isSquelBuilder(obj) || !obj.options.rawNesting;\n  };\n\n  // default query builder options\n  cls.DefaultQueryBuilderOptions = {\n    // If true then table names will be rendered inside quotes. The quote character used is configurable via the nameQuoteCharacter option.\n    autoQuoteTableNames: false,\n    // If true then field names will rendered inside quotes. The quote character used is configurable via the nameQuoteCharacter option.\n    autoQuoteFieldNames: false,\n    // If true then alias names will rendered inside quotes. The quote character used is configurable via the `tableAliasQuoteCharacter` and `fieldAliasQuoteCharacter` options.\n    autoQuoteAliasNames: true,\n    // If true then table alias names will rendered after AS keyword.\n    useAsForTableAliasNames: false,\n    // The quote character used for when quoting table and field names\n    nameQuoteCharacter: '`',\n    // The quote character used for when quoting table alias names\n    tableAliasQuoteCharacter: '`',\n    // The quote character used for when quoting table alias names\n    fieldAliasQuoteCharacter: '\"',\n    // Custom value handlers where key is the value type and the value is the handler function\n    valueHandlers: [],\n    // Character used to represent a parameter value\n    parameterCharacter: '?',\n    // Numbered parameters returned from toParam() as $1, $2, etc.\n    numberedParameters: false,\n    // Numbered parameters prefix character(s)\n    numberedParametersPrefix: '$',\n    // Numbered parameters start at this number.\n    numberedParametersStartAt: 1,\n    // If true then replaces all single quotes within strings. The replacement string used is configurable via the `singleQuoteReplacement` option.\n    replaceSingleQuotes: false,\n    // The string to replace single quotes with in query strings\n    singleQuoteReplacement: '\\'\\'',\n    // String used to join individual blocks in a query when it's stringified\n    separator: ' ',\n    // Function for formatting string values prior to insertion into query string\n    stringFormatter: null,\n    // Whether to prevent the addition of brackets () when nesting this query builder's output\n    rawNesting: false\n  };\n\n  // Global custom value handlers for all instances of builder\n  cls.globalValueHandlers = [];\n\n  /*\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  # Custom value types\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n   */\n\n  // Register a new value handler\n  cls.registerValueHandler = function (type, handler) {\n    _registerValueHandler(cls.globalValueHandlers, type, handler);\n  };\n\n  /*\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  # Base classes\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  */\n\n  // Base class for cloneable builders\n  cls.Cloneable = function () {\n    function _class() {\n      _classCallCheck(this, _class);\n    }\n\n    _createClass(_class, [{\n      key: 'clone',\n\n      /**\n       * Clone this builder\n       */\n      value: function clone() {\n        var newInstance = new this.constructor();\n\n        return _extend(newInstance, _clone(_extend({}, this)));\n      }\n    }]);\n\n    return _class;\n  }();\n\n  // Base class for all builders\n  cls.BaseBuilder = function (_cls$Cloneable) {\n    _inherits(_class2, _cls$Cloneable);\n\n    /**\n     * Constructor.\n     * this.param  {Object} options Overriding one or more of `cls.DefaultQueryBuilderOptions`.\n     */\n\n    function _class2(options) {\n      _classCallCheck(this, _class2);\n\n      var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(_class2).call(this));\n\n      var defaults = JSON.parse(JSON.stringify(cls.DefaultQueryBuilderOptions));\n\n      _this.options = _extend({}, defaults, options);\n      return _this;\n    }\n\n    /**\n     * Register a custom value handler for this builder instance.\n     *\n     * Note: this will override any globally registered handler for this value type.\n     */\n\n\n    _createClass(_class2, [{\n      key: 'registerValueHandler',\n      value: function registerValueHandler(type, handler) {\n        _registerValueHandler(this.options.valueHandlers, type, handler);\n        return this;\n      }\n\n      /**\n       * Sanitize given expression.\n       */\n\n    }, {\n      key: '_sanitizeExpression',\n      value: function _sanitizeExpression(expr) {\n        // If it's not a base builder instance\n        if (!cls.isSquelBuilder(expr)) {\n          // It must then be a string\n          if (typeof expr !== \"string\") {\n            throw new Error(\"expression must be a string or builder instance\");\n          }\n        }\n\n        return expr;\n      }\n\n      /**\n       * Sanitize the given name.\n       *\n       * The 'type' parameter is used to construct a meaningful error message in case validation fails.\n       */\n\n    }, {\n      key: '_sanitizeName',\n      value: function _sanitizeName(value, type) {\n        if (typeof value !== \"string\") {\n          throw new Error(type + ' must be a string');\n        }\n\n        return value;\n      }\n    }, {\n      key: '_sanitizeField',\n      value: function _sanitizeField(item) {\n        if (!cls.isSquelBuilder(item)) {\n          item = this._sanitizeName(item, \"field name\");\n        }\n\n        return item;\n      }\n    }, {\n      key: '_sanitizeBaseBuilder',\n      value: function _sanitizeBaseBuilder(item) {\n        if (cls.isSquelBuilder(item)) {\n          return item;\n        }\n\n        throw new Error(\"must be a builder instance\");\n      }\n    }, {\n      key: '_sanitizeTable',\n      value: function _sanitizeTable(item) {\n        if (typeof item !== \"string\") {\n          try {\n            item = this._sanitizeBaseBuilder(item);\n          } catch (e) {\n            throw new Error(\"table name must be a string or a builder\");\n          }\n        } else {\n          item = this._sanitizeName(item, 'table');\n        }\n\n        return item;\n      }\n    }, {\n      key: '_sanitizeTableAlias',\n      value: function _sanitizeTableAlias(item) {\n        return this._sanitizeName(item, \"table alias\");\n      }\n    }, {\n      key: '_sanitizeFieldAlias',\n      value: function _sanitizeFieldAlias(item) {\n        return this._sanitizeName(item, \"field alias\");\n      }\n\n      // Sanitize the given limit/offset value.\n\n    }, {\n      key: '_sanitizeLimitOffset',\n      value: function _sanitizeLimitOffset(value) {\n        value = parseInt(value);\n\n        if (0 > value || isNaN(value)) {\n          throw new Error(\"limit/offset must be >= 0\");\n        }\n\n        return value;\n      }\n\n      // Santize the given field value\n\n    }, {\n      key: '_sanitizeValue',\n      value: function _sanitizeValue(item) {\n        var itemType = typeof item === 'undefined' ? 'undefined' : _typeof(item);\n\n        if (null === item) {\n          // null is allowed\n        } else if (\"string\" === itemType || \"number\" === itemType || \"boolean\" === itemType) {\n            // primitives are allowed\n          } else if (cls.isSquelBuilder(item)) {\n              // Builders allowed\n            } else {\n                var typeIsValid = !!getValueHandler(item, this.options.valueHandlers, cls.globalValueHandlers);\n\n                if (!typeIsValid) {\n                  throw new Error(\"field value must be a string, number, boolean, null or one of the registered custom value types\");\n                }\n              }\n\n        return item;\n      }\n\n      // Escape a string value, e.g. escape quotes and other characters within it.\n\n    }, {\n      key: '_escapeValue',\n      value: function _escapeValue(value) {\n        return !this.options.replaceSingleQuotes ? value : value.replace(/\\'/g, this.options.singleQuoteReplacement);\n      }\n    }, {\n      key: '_formatTableName',\n      value: function _formatTableName(item) {\n        if (this.options.autoQuoteTableNames) {\n          var quoteChar = this.options.nameQuoteCharacter;\n\n          item = '' + quoteChar + item + quoteChar;\n        }\n\n        return item;\n      }\n    }, {\n      key: '_formatFieldAlias',\n      value: function _formatFieldAlias(item) {\n        if (this.options.autoQuoteAliasNames) {\n          var quoteChar = this.options.fieldAliasQuoteCharacter;\n\n          item = '' + quoteChar + item + quoteChar;\n        }\n\n        return item;\n      }\n    }, {\n      key: '_formatTableAlias',\n      value: function _formatTableAlias(item) {\n        if (this.options.autoQuoteAliasNames) {\n          var quoteChar = this.options.tableAliasQuoteCharacter;\n\n          item = '' + quoteChar + item + quoteChar;\n        }\n\n        return this.options.useAsForTableAliasNames ? 'AS ' + item : item;\n      }\n    }, {\n      key: '_formatFieldName',\n      value: function _formatFieldName(item) {\n        var _this2 = this;\n\n        var formattingOptions = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n        if (this.options.autoQuoteFieldNames) {\n          (function () {\n            var quoteChar = _this2.options.nameQuoteCharacter;\n\n            if (formattingOptions.ignorePeriodsForFieldNameQuotes) {\n              // a.b.c -> `a.b.c`\n              item = '' + quoteChar + item + quoteChar;\n            } else {\n              // a.b.c -> `a`.`b`.`c`\n              item = item.split('.').map(function (v) {\n                // treat '*' as special case (#79)\n                return '*' === v ? v : '' + quoteChar + v + quoteChar;\n              }).join('.');\n            }\n          })();\n        }\n\n        return item;\n      }\n\n      // Format the given custom value\n\n    }, {\n      key: '_formatCustomValue',\n      value: function _formatCustomValue(value, asParam, formattingOptions) {\n        // user defined custom handlers takes precedence\n        var customHandler = getValueHandler(value, this.options.valueHandlers, cls.globalValueHandlers);\n\n        // use the custom handler if available\n        if (customHandler) {\n          value = customHandler(value, asParam, formattingOptions);\n\n          // custom value handler can instruct caller not to process returned value\n          if (value && value.rawNesting) {\n            return {\n              formatted: true,\n              rawNesting: true,\n              value: value.value\n            };\n          }\n        }\n\n        return {\n          formatted: !!customHandler,\n          value: value\n\n        };\n      }\n\n      /**\n       * Format given value for inclusion into parameter values array.\n       */\n\n    }, {\n      key: '_formatValueForParamArray',\n      value: function _formatValueForParamArray(value) {\n        var _this3 = this;\n\n        var formattingOptions = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n        if (_isArray(value)) {\n          return value.map(function (v) {\n            return _this3._formatValueForParamArray(v, formattingOptions);\n          });\n        } else {\n          return this._formatCustomValue(value, true, formattingOptions).value;\n        }\n      }\n\n      /**\n       * Format the given field value for inclusion into the query string\n       */\n\n    }, {\n      key: '_formatValueForQueryString',\n      value: function _formatValueForQueryString(initialValue) {\n        var _this4 = this;\n\n        var formattingOptions = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n        // maybe we have a cusotm value handler\n\n        var _formatCustomValue2 = this._formatCustomValue(initialValue, false, formattingOptions);\n\n        var rawNesting = _formatCustomValue2.rawNesting;\n        var formatted = _formatCustomValue2.formatted;\n        var value = _formatCustomValue2.value;\n\n        // if formatting took place then return it directly\n\n        if (formatted) {\n          if (rawNesting) {\n            return value;\n          } else {\n            return this._applyNestingFormatting(value, _shouldApplyNesting(initialValue));\n          }\n        }\n\n        // if it's an array then format each element separately\n        if (_isArray(value)) {\n          value = value.map(function (v) {\n            return _this4._formatValueForQueryString(v);\n          });\n\n          value = this._applyNestingFormatting(value.join(', '), _shouldApplyNesting(value));\n        } else {\n          var typeofValue = typeof value === 'undefined' ? 'undefined' : _typeof(value);\n\n          if (null === value) {\n            value = \"NULL\";\n          } else if (typeofValue === \"boolean\") {\n            value = value ? \"TRUE\" : \"FALSE\";\n          } else if (cls.isSquelBuilder(value)) {\n            value = this._applyNestingFormatting(value.toString(), _shouldApplyNesting(value));\n          } else if (typeofValue !== \"number\") {\n            // if it's a string and we have custom string formatting turned on then use that\n            if ('string' === typeofValue && this.options.stringFormatter) {\n              return this.options.stringFormatter(value);\n            }\n\n            if (formattingOptions.dontQuote) {\n              value = '' + value;\n            } else {\n              var escapedValue = this._escapeValue(value);\n\n              value = '\\'' + escapedValue + '\\'';\n            }\n          }\n        }\n\n        return value;\n      }\n    }, {\n      key: '_applyNestingFormatting',\n      value: function _applyNestingFormatting(str) {\n        var nesting = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];\n\n        if (str && typeof str === 'string' && nesting && !this.options.rawNesting) {\n          // apply brackets if they're not already existing\n          var alreadyHasBrackets = '(' === str.charAt(0) && ')' === str.charAt(str.length - 1);\n\n          if (alreadyHasBrackets) {\n            // check that it's the form \"((x)..(y))\" rather than \"(x)..(y)\"\n            var idx = 0,\n                open = 1;\n\n            while (str.length - 1 > ++idx) {\n              var c = str.charAt(idx);\n\n              if ('(' === c) {\n                open++;\n              } else if (')' === c) {\n                open--;\n                if (1 > open) {\n                  alreadyHasBrackets = false;\n\n                  break;\n                }\n              }\n            }\n          }\n\n          if (!alreadyHasBrackets) {\n            str = '(' + str + ')';\n          }\n        }\n\n        return str;\n      }\n\n      /**\n       * Build given string and its corresponding parameter values into\n       * output.\n       *\n       * @param {String} str\n       * @param {Array}  values\n       * @param {Object} [options] Additional options.\n       * @param {Boolean} [options.buildParameterized] Whether to build paramterized string. Default is false.\n       * @param {Boolean} [options.nested] Whether this expression is nested within another.\n       * @param {Boolean} [options.formattingOptions] Formatting options for values in query string.\n       * @return {Object}\n       */\n\n    }, {\n      key: '_buildString',\n      value: function _buildString(str, values) {\n        var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n        var nested = options.nested;\n        var buildParameterized = options.buildParameterized;\n        var formattingOptions = options.formattingOptions;\n\n\n        values = values || [];\n        str = str || '';\n\n        var formattedStr = '',\n            curValue = -1,\n            formattedValues = [];\n\n        var paramChar = this.options.parameterCharacter;\n\n        var idx = 0;\n\n        while (str.length > idx) {\n          // param char?\n          if (str.substr(idx, paramChar.length) === paramChar) {\n            var value = values[++curValue];\n\n            if (buildParameterized) {\n              if (cls.isSquelBuilder(value)) {\n                var ret = value._toParamString({\n                  buildParameterized: buildParameterized,\n                  nested: true\n                });\n\n                formattedStr += ret.text;\n                ret.values.forEach(function (value) {\n                  return formattedValues.push(value);\n                });\n              } else {\n                value = this._formatValueForParamArray(value, formattingOptions);\n\n                if (_isArray(value)) {\n                  // Array(6) -> \"(??, ??, ??, ??, ??, ??)\"\n                  var tmpStr = value.map(function () {\n                    return paramChar;\n                  }).join(', ');\n\n                  formattedStr += '(' + tmpStr + ')';\n\n                  value.forEach(function (val) {\n                    return formattedValues.push(val);\n                  });\n                } else {\n                  formattedStr += paramChar;\n\n                  formattedValues.push(value);\n                }\n              }\n            } else {\n              formattedStr += this._formatValueForQueryString(value, formattingOptions);\n            }\n\n            idx += paramChar.length;\n          } else {\n            formattedStr += str.charAt(idx);\n\n            idx++;\n          }\n        }\n\n        return {\n          text: this._applyNestingFormatting(formattedStr, !!nested),\n          values: formattedValues\n        };\n      }\n\n      /**\n       * Build all given strings and their corresponding parameter values into\n       * output.\n       *\n       * @param {Array} strings\n       * @param {Array}  strValues array of value arrays corresponding to each string.\n       * @param {Object} [options] Additional options.\n       * @param {Boolean} [options.buildParameterized] Whether to build paramterized string. Default is false.\n       * @param {Boolean} [options.nested] Whether this expression is nested within another.\n       * @return {Object}\n       */\n\n    }, {\n      key: '_buildManyStrings',\n      value: function _buildManyStrings(strings, strValues) {\n        var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n        var totalStr = [],\n            totalValues = [];\n\n        for (var idx = 0; strings.length > idx; ++idx) {\n          var inputString = strings[idx],\n              inputValues = strValues[idx];\n\n          var _buildString2 = this._buildString(inputString, inputValues, {\n            buildParameterized: options.buildParameterized,\n            nested: false\n          });\n\n          var text = _buildString2.text;\n          var values = _buildString2.values;\n\n\n          totalStr.push(text);\n          values.forEach(function (value) {\n            return totalValues.push(value);\n          });\n        }\n\n        totalStr = totalStr.join(this.options.separator);\n\n        return {\n          text: totalStr.length ? this._applyNestingFormatting(totalStr, !!options.nested) : '',\n          values: totalValues\n        };\n      }\n\n      /**\n       * Get parameterized representation of this instance.\n       *\n       * @param {Object} [options] Options.\n       * @param {Boolean} [options.buildParameterized] Whether to build paramterized string. Default is false.\n       * @param {Boolean} [options.nested] Whether this expression is nested within another.\n       * @return {Object}\n       */\n\n    }, {\n      key: '_toParamString',\n      value: function _toParamString(options) {\n        throw new Error('Not yet implemented');\n      }\n\n      /**\n       * Get the expression string.\n       * @return {String}\n       */\n\n    }, {\n      key: 'toString',\n      value: function toString() {\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n        return this._toParamString(options).text;\n      }\n\n      /**\n       * Get the parameterized expression string.\n       * @return {Object}\n       */\n\n    }, {\n      key: 'toParam',\n      value: function toParam() {\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n        return this._toParamString(_extend({}, options, {\n          buildParameterized: true\n        }));\n      }\n    }]);\n\n    return _class2;\n  }(cls.Cloneable);\n\n  /*\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  # cls.Expressions\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  */\n\n  /**\n   * An SQL expression builder.\n   *\n   * SQL expressions are used in WHERE and ON clauses to filter data by various criteria.\n   *\n   * Expressions can be nested. Nested expression contains can themselves\n   * contain nested expressions. When rendered a nested expression will be\n   * fully contained within brackets.\n   *\n   * All the build methods in this object return the object instance for chained method calling purposes.\n   */\n  cls.Expression = function (_cls$BaseBuilder) {\n    _inherits(_class3, _cls$BaseBuilder);\n\n    // Initialise the expression.\n\n    function _class3(options) {\n      _classCallCheck(this, _class3);\n\n      var _this5 = _possibleConstructorReturn(this, Object.getPrototypeOf(_class3).call(this, options));\n\n      _this5._nodes = [];\n      return _this5;\n    }\n\n    // Combine the current expression with the given expression using the intersection operator (AND).\n\n\n    _createClass(_class3, [{\n      key: 'and',\n      value: function and(expr) {\n        for (var _len2 = arguments.length, params = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          params[_key2 - 1] = arguments[_key2];\n        }\n\n        expr = this._sanitizeExpression(expr);\n\n        this._nodes.push({\n          type: 'AND',\n          expr: expr,\n          para: params\n        });\n\n        return this;\n      }\n\n      // Combine the current expression with the given expression using the union operator (OR).\n\n    }, {\n      key: 'or',\n      value: function or(expr) {\n        for (var _len3 = arguments.length, params = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n          params[_key3 - 1] = arguments[_key3];\n        }\n\n        expr = this._sanitizeExpression(expr);\n\n        this._nodes.push({\n          type: 'OR',\n          expr: expr,\n          para: params\n        });\n\n        return this;\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n        var totalStr = [],\n            totalValues = [];\n\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = this._nodes[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var node = _step3.value;\n            var type = node.type;\n            var expr = node.expr;\n            var para = node.para;\n\n            var _ref = cls.isSquelBuilder(expr) ? expr._toParamString({\n              buildParameterized: options.buildParameterized,\n              nested: true\n            }) : this._buildString(expr, para, {\n              buildParameterized: options.buildParameterized\n            });\n\n            var text = _ref.text;\n            var values = _ref.values;\n\n\n            if (totalStr.length) {\n              totalStr.push(type);\n            }\n\n            totalStr.push(text);\n            values.forEach(function (value) {\n              return totalValues.push(value);\n            });\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n\n        totalStr = totalStr.join(' ');\n\n        return {\n          text: this._applyNestingFormatting(totalStr, !!options.nested),\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class3;\n  }(cls.BaseBuilder);\n\n  /*\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  # cls.Case\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  */\n\n  /**\n   * An SQL CASE expression builder.\n   *\n   * SQL cases are used to select proper values based on specific criteria.\n   */\n  cls.Case = function (_cls$BaseBuilder2) {\n    _inherits(_class4, _cls$BaseBuilder2);\n\n    function _class4(fieldName) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      _classCallCheck(this, _class4);\n\n      var _this6 = _possibleConstructorReturn(this, Object.getPrototypeOf(_class4).call(this, options));\n\n      if (_isPlainObject(fieldName)) {\n        options = fieldName;\n\n        fieldName = null;\n      }\n\n      if (fieldName) {\n        _this6._fieldName = _this6._sanitizeField(fieldName);\n      }\n\n      _this6.options = _extend({}, cls.DefaultQueryBuilderOptions, options);\n\n      _this6._cases = [];\n      _this6._elseValue = null;\n      return _this6;\n    }\n\n    _createClass(_class4, [{\n      key: 'when',\n      value: function when(expression) {\n        for (var _len4 = arguments.length, values = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n          values[_key4 - 1] = arguments[_key4];\n        }\n\n        this._cases.unshift({\n          expression: expression,\n          values: values || []\n        });\n\n        return this;\n      }\n    }, {\n      key: 'then',\n      value: function then(result) {\n        if (this._cases.length == 0) {\n          throw new Error(\"when() needs to be called first\");\n        }\n\n        this._cases[0].result = result;\n\n        return this;\n      }\n    }, {\n      key: 'else',\n      value: function _else(elseValue) {\n        this._elseValue = elseValue;\n\n        return this;\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n        var totalStr = '',\n            totalValues = [];\n\n        var _iteratorNormalCompletion4 = true;\n        var _didIteratorError4 = false;\n        var _iteratorError4 = undefined;\n\n        try {\n          for (var _iterator4 = this._cases[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n            var _step4$value = _step4.value;\n            var expression = _step4$value.expression;\n            var _values = _step4$value.values;\n            var result = _step4$value.result;\n\n            totalStr = _pad(totalStr, ' ');\n\n            var ret = this._buildString(expression, _values, {\n              buildParameterized: options.buildParameterized,\n              nested: true\n            });\n\n            totalStr += 'WHEN ' + ret.text + ' THEN ' + this._formatValueForQueryString(result);\n            ret.values.forEach(function (value) {\n              return totalValues.push(value);\n            });\n          }\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion4 && _iterator4.return) {\n              _iterator4.return();\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        }\n\n        if (totalStr.length) {\n          totalStr += ' ELSE ' + this._formatValueForQueryString(this._elseValue) + ' END';\n\n          if (this._fieldName) {\n            totalStr = this._fieldName + ' ' + totalStr;\n          }\n\n          totalStr = 'CASE ' + totalStr;\n        } else {\n          totalStr = this._formatValueForQueryString(this._elseValue);\n        }\n\n        return {\n          text: totalStr,\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class4;\n  }(cls.BaseBuilder);\n\n  /*\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  # Building blocks\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  */\n\n  /*\n  # A building block represents a single build-step within a query building process.\n  #\n  # Query builders consist of one or more building blocks which get run in a particular order. Building blocks can\n  # optionally specify methods to expose through the query builder interface. They can access all the input data for\n  # the query builder and manipulate it as necessary, as well as append to the final query string output.\n  #\n  # If you wish to customize how queries get built or add proprietary query phrases and content then it is recommended\n  # that you do so using one or more custom building blocks.\n  #\n  # Original idea posted in https://github.com/hiddentao/export/issues/10#issuecomment-15016427\n  */\n  cls.Block = function (_cls$BaseBuilder3) {\n    _inherits(_class5, _cls$BaseBuilder3);\n\n    function _class5(options) {\n      _classCallCheck(this, _class5);\n\n      return _possibleConstructorReturn(this, Object.getPrototypeOf(_class5).call(this, options));\n    }\n\n    /**\n    # Get input methods to expose within the query builder.\n    #\n    # By default all methods except the following get returned:\n    #   methods prefixed with _\n    #   constructor and toString()\n    #\n    # @return Object key -> function pairs\n    */\n\n\n    _createClass(_class5, [{\n      key: 'exposedMethods',\n      value: function exposedMethods() {\n        var ret = {};\n\n        var obj = this;\n\n        while (obj) {\n          Object.getOwnPropertyNames(obj).forEach(function (prop) {\n            if ('constructor' !== prop && typeof obj[prop] === \"function\" && prop.charAt(0) !== '_' && !cls.Block.prototype[prop]) {\n              ret[prop] = obj[prop];\n            }\n          });\n\n          obj = Object.getPrototypeOf(obj);\n        };\n\n        return ret;\n      }\n    }]);\n\n    return _class5;\n  }(cls.BaseBuilder);\n\n  // A fixed string which always gets output\n  cls.StringBlock = function (_cls$Block) {\n    _inherits(_class6, _cls$Block);\n\n    function _class6(options, str) {\n      _classCallCheck(this, _class6);\n\n      var _this8 = _possibleConstructorReturn(this, Object.getPrototypeOf(_class6).call(this, options));\n\n      _this8._str = str;\n      return _this8;\n    }\n\n    _createClass(_class6, [{\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n        return {\n          text: this._str,\n          values: []\n        };\n      }\n    }]);\n\n    return _class6;\n  }(cls.Block);\n\n  // A function string block\n  cls.FunctionBlock = function (_cls$Block2) {\n    _inherits(_class7, _cls$Block2);\n\n    function _class7(options) {\n      _classCallCheck(this, _class7);\n\n      var _this9 = _possibleConstructorReturn(this, Object.getPrototypeOf(_class7).call(this, options));\n\n      _this9._strings = [];\n      _this9._values = [];\n      return _this9;\n    }\n\n    _createClass(_class7, [{\n      key: 'function',\n      value: function _function(str) {\n        this._strings.push(str);\n\n        for (var _len5 = arguments.length, values = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n          values[_key5 - 1] = arguments[_key5];\n        }\n\n        this._values.push(values);\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n        return this._buildManyStrings(this._strings, this._values, options);\n      }\n    }]);\n\n    return _class7;\n  }(cls.Block);\n\n  // value handler for FunctionValueBlock objects\n  cls.registerValueHandler(cls.FunctionBlock, function (value) {\n    var asParam = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n    return asParam ? value.toParam() : value.toString();\n  });\n\n  /*\n  # Table specifier base class\n  */\n  cls.AbstractTableBlock = function (_cls$Block3) {\n    _inherits(_class8, _cls$Block3);\n\n    /**\n     * @param {Boolean} [options.singleTable] If true then only allow one table spec.\n     * @param {String} [options.prefix] String prefix for output.\n     */\n\n    function _class8(options, prefix) {\n      _classCallCheck(this, _class8);\n\n      var _this10 = _possibleConstructorReturn(this, Object.getPrototypeOf(_class8).call(this, options));\n\n      _this10._tables = [];\n      return _this10;\n    }\n\n    /**\n    # Update given table.\n    #\n    # An alias may also be specified for the table.\n    #\n    # Concrete subclasses should provide a method which calls this\n    */\n\n\n    _createClass(_class8, [{\n      key: '_table',\n      value: function _table(table) {\n        var alias = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n\n        alias = alias ? this._sanitizeTableAlias(alias) : alias;\n        table = this._sanitizeTable(table);\n\n        if (this.options.singleTable) {\n          this._tables = [];\n        }\n\n        this._tables.push({\n          table: table,\n          alias: alias\n        });\n      }\n\n      // get whether a table has been set\n\n    }, {\n      key: '_hasTable',\n      value: function _hasTable() {\n        return 0 < this._tables.length;\n      }\n\n      /**\n       * @override\n       */\n\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n        var totalStr = '',\n            totalValues = [];\n\n        if (this._hasTable()) {\n          // retrieve the parameterised queries\n          var _iteratorNormalCompletion5 = true;\n          var _didIteratorError5 = false;\n          var _iteratorError5 = undefined;\n\n          try {\n            for (var _iterator5 = this._tables[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n              var _step5$value = _step5.value;\n              var table = _step5$value.table;\n              var alias = _step5$value.alias;\n\n              totalStr = _pad(totalStr, ', ');\n\n              var tableStr = void 0;\n\n              if (cls.isSquelBuilder(table)) {\n                var _table$_toParamString = table._toParamString({\n                  buildParameterized: options.buildParameterized,\n                  nested: true\n                });\n\n                var text = _table$_toParamString.text;\n                var values = _table$_toParamString.values;\n\n\n                tableStr = text;\n                values.forEach(function (value) {\n                  return totalValues.push(value);\n                });\n              } else {\n                tableStr = this._formatTableName(table);\n              }\n\n              if (alias) {\n                tableStr += ' ' + this._formatTableAlias(alias);\n              }\n\n              totalStr += tableStr;\n            }\n          } catch (err) {\n            _didIteratorError5 = true;\n            _iteratorError5 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                _iterator5.return();\n              }\n            } finally {\n              if (_didIteratorError5) {\n                throw _iteratorError5;\n              }\n            }\n          }\n\n          if (this.options.prefix) {\n            totalStr = this.options.prefix + ' ' + totalStr;\n          }\n        }\n\n        return {\n          text: totalStr,\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class8;\n  }(cls.Block);\n\n  // target table for DELETE queries, DELETE <??> FROM\n  cls.TargetTableBlock = function (_cls$AbstractTableBlo) {\n    _inherits(_class9, _cls$AbstractTableBlo);\n\n    function _class9() {\n      _classCallCheck(this, _class9);\n\n      return _possibleConstructorReturn(this, Object.getPrototypeOf(_class9).apply(this, arguments));\n    }\n\n    _createClass(_class9, [{\n      key: 'target',\n      value: function target(table) {\n        this._table(table);\n      }\n    }]);\n\n    return _class9;\n  }(cls.AbstractTableBlock);\n\n  // Update Table\n  cls.UpdateTableBlock = function (_cls$AbstractTableBlo2) {\n    _inherits(_class10, _cls$AbstractTableBlo2);\n\n    function _class10() {\n      _classCallCheck(this, _class10);\n\n      return _possibleConstructorReturn(this, Object.getPrototypeOf(_class10).apply(this, arguments));\n    }\n\n    _createClass(_class10, [{\n      key: 'table',\n      value: function table(_table2) {\n        var alias = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n\n        this._table(_table2, alias);\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n        if (!this._hasTable()) {\n          throw new Error(\"table() needs to be called\");\n        }\n\n        return _get(Object.getPrototypeOf(_class10.prototype), '_toParamString', this).call(this, options);\n      }\n    }]);\n\n    return _class10;\n  }(cls.AbstractTableBlock);\n\n  // FROM table\n  cls.FromTableBlock = function (_cls$AbstractTableBlo3) {\n    _inherits(_class11, _cls$AbstractTableBlo3);\n\n    function _class11(options) {\n      _classCallCheck(this, _class11);\n\n      return _possibleConstructorReturn(this, Object.getPrototypeOf(_class11).call(this, _extend({}, options, {\n        prefix: 'FROM'\n      })));\n    }\n\n    _createClass(_class11, [{\n      key: 'from',\n      value: function from(table) {\n        var alias = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n\n        this._table(table, alias);\n      }\n    }]);\n\n    return _class11;\n  }(cls.AbstractTableBlock);\n\n  // INTO table\n  cls.IntoTableBlock = function (_cls$AbstractTableBlo4) {\n    _inherits(_class12, _cls$AbstractTableBlo4);\n\n    function _class12(options) {\n      _classCallCheck(this, _class12);\n\n      return _possibleConstructorReturn(this, Object.getPrototypeOf(_class12).call(this, _extend({}, options, {\n        prefix: 'INTO',\n        singleTable: true\n      })));\n    }\n\n    _createClass(_class12, [{\n      key: 'into',\n      value: function into(table) {\n        this._table(table);\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n        if (!this._hasTable()) {\n          throw new Error(\"into() needs to be called\");\n        }\n\n        return _get(Object.getPrototypeOf(_class12.prototype), '_toParamString', this).call(this, options);\n      }\n    }]);\n\n    return _class12;\n  }(cls.AbstractTableBlock);\n\n  // (SELECT) Get field\n  cls.GetFieldBlock = function (_cls$Block4) {\n    _inherits(_class13, _cls$Block4);\n\n    function _class13(options) {\n      _classCallCheck(this, _class13);\n\n      var _this15 = _possibleConstructorReturn(this, Object.getPrototypeOf(_class13).call(this, options));\n\n      _this15._fields = [];\n      return _this15;\n    }\n\n    /**\n    # Add the given fields to the final result set.\n    #\n    # The parameter is an Object containing field names (or database functions) as the keys and aliases for the fields\n    # as the values. If the value for a key is null then no alias is set for that field.\n    #\n    # Internally this method simply calls the field() method of this block to add each individual field.\n    #\n    # options.ignorePeriodsForFieldNameQuotes - whether to ignore period (.) when automatically quoting the field name\n    */\n\n\n    _createClass(_class13, [{\n      key: 'fields',\n      value: function fields(_fields) {\n        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n        if (_isArray(_fields)) {\n          var _iteratorNormalCompletion6 = true;\n          var _didIteratorError6 = false;\n          var _iteratorError6 = undefined;\n\n          try {\n            for (var _iterator6 = _fields[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n              var field = _step6.value;\n\n              this.field(field, null, options);\n            }\n          } catch (err) {\n            _didIteratorError6 = true;\n            _iteratorError6 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                _iterator6.return();\n              }\n            } finally {\n              if (_didIteratorError6) {\n                throw _iteratorError6;\n              }\n            }\n          }\n        } else {\n          for (var _field2 in _fields) {\n            var alias = _fields[_field2];\n\n            this.field(_field2, alias, options);\n          }\n        }\n      }\n\n      /**\n      # Add the given field to the final result set.\n      #\n      # The 'field' parameter does not necessarily have to be a fieldname. It can use database functions too,\n      # e.g. DATE_FORMAT(a.started, \"%H\")\n      #\n      # An alias may also be specified for this field.\n      #\n      # options.ignorePeriodsForFieldNameQuotes - whether to ignore period (.) when automatically quoting the field name\n      */\n\n    }, {\n      key: 'field',\n      value: function field(_field) {\n        var alias = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n        var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n        alias = alias ? this._sanitizeFieldAlias(alias) : alias;\n        _field = this._sanitizeField(_field);\n\n        // if field-alias combo already present then don't add\n        var existingField = this._fields.filter(function (f) {\n          return f.name === _field && f.alias === alias;\n        });\n        if (existingField.length) {\n          return this;\n        }\n\n        this._fields.push({\n          name: _field,\n          alias: alias,\n          options: options\n        });\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n        var queryBuilder = options.queryBuilder;\n        var buildParameterized = options.buildParameterized;\n\n\n        var totalStr = '',\n            totalValues = [];\n\n        var _iteratorNormalCompletion7 = true;\n        var _didIteratorError7 = false;\n        var _iteratorError7 = undefined;\n\n        try {\n          for (var _iterator7 = this._fields[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n            var field = _step7.value;\n\n            totalStr = _pad(totalStr, \", \");\n\n            var name = field.name;\n            var alias = field.alias;\n            var _options = field.options;\n\n\n            if (typeof name === 'string') {\n              totalStr += this._formatFieldName(name, _options);\n            } else {\n              var ret = name._toParamString({\n                nested: true,\n                buildParameterized: buildParameterized\n              });\n\n              totalStr += ret.text;\n              ret.values.forEach(function (value) {\n                return totalValues.push(value);\n              });\n            }\n\n            if (alias) {\n              totalStr += ' AS ' + this._formatFieldAlias(alias);\n            }\n          }\n        } catch (err) {\n          _didIteratorError7 = true;\n          _iteratorError7 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion7 && _iterator7.return) {\n              _iterator7.return();\n            }\n          } finally {\n            if (_didIteratorError7) {\n              throw _iteratorError7;\n            }\n          }\n        }\n\n        if (!totalStr.length) {\n          // if select query and a table is set then all fields wanted\n          var fromTableBlock = queryBuilder && queryBuilder.getBlock(cls.FromTableBlock);\n          if (fromTableBlock && fromTableBlock._hasTable()) {\n            totalStr = \"*\";\n          }\n        }\n\n        return {\n          text: totalStr,\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class13;\n  }(cls.Block);\n\n  // Base class for setting fields to values (used for INSERT and UPDATE queries)\n  cls.AbstractSetFieldBlock = function (_cls$Block5) {\n    _inherits(_class14, _cls$Block5);\n\n    function _class14(options) {\n      _classCallCheck(this, _class14);\n\n      var _this16 = _possibleConstructorReturn(this, Object.getPrototypeOf(_class14).call(this, options));\n\n      _this16._reset();\n      return _this16;\n    }\n\n    _createClass(_class14, [{\n      key: '_reset',\n      value: function _reset() {\n        this._fields = [];\n        this._values = [[]];\n        this._valueOptions = [[]];\n      }\n\n      // Update the given field with the given value.\n      // This will override any previously set value for the given field.\n\n    }, {\n      key: '_set',\n      value: function _set(field, value) {\n        var valueOptions = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n        if (this._values.length > 1) {\n          throw new Error(\"Cannot set multiple rows of fields this way.\");\n        }\n\n        if (typeof value !== 'undefined') {\n          value = this._sanitizeValue(value);\n        }\n\n        field = this._sanitizeField(field);\n\n        // Explicity overwrite existing fields\n        var index = this._fields.indexOf(field);\n\n        // if field not defined before\n        if (-1 === index) {\n          this._fields.push(field);\n          index = this._fields.length - 1;\n        }\n\n        this._values[0][index] = value;\n        this._valueOptions[0][index] = valueOptions;\n      }\n\n      // Insert fields based on the key/value pairs in the given object\n\n    }, {\n      key: '_setFields',\n      value: function _setFields(fields) {\n        var valueOptions = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n        if ((typeof fields === 'undefined' ? 'undefined' : _typeof(fields)) !== 'object') {\n          throw new Error(\"Expected an object but got \" + (typeof fields === 'undefined' ? 'undefined' : _typeof(fields)));\n        }\n\n        for (var field in fields) {\n          this._set(field, fields[field], valueOptions);\n        }\n      }\n\n      // Insert multiple rows for the given fields. Accepts an array of objects.\n      // This will override all previously set values for every field.\n\n    }, {\n      key: '_setFieldsRows',\n      value: function _setFieldsRows(fieldsRows) {\n        var valueOptions = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n        if (!_isArray(fieldsRows)) {\n          throw new Error(\"Expected an array of objects but got \" + (typeof fieldsRows === 'undefined' ? 'undefined' : _typeof(fieldsRows)));\n        }\n\n        // Reset the objects stored fields and values\n        this._reset();\n\n        // for each row\n        for (var i = 0; fieldsRows.length > i; ++i) {\n          var fieldRow = fieldsRows[i];\n\n          // for each field\n          for (var field in fieldRow) {\n            var value = fieldRow[field];\n\n            field = this._sanitizeField(field);\n            value = this._sanitizeValue(value);\n\n            var index = this._fields.indexOf(field);\n\n            if (0 < i && -1 === index) {\n              throw new Error('All fields in subsequent rows must match the fields in the first row');\n            }\n\n            // Add field only if it hasn't been added before\n            if (-1 === index) {\n              this._fields.push(field);\n              index = this._fields.length - 1;\n            }\n\n            // The first value added needs to add the array\n            if (!_isArray(this._values[i])) {\n              this._values[i] = [];\n              this._valueOptions[i] = [];\n            }\n\n            this._values[i][index] = value;\n            this._valueOptions[i][index] = valueOptions;\n          }\n        }\n      }\n    }]);\n\n    return _class14;\n  }(cls.Block);\n\n  // (UPDATE) SET field=value\n  cls.SetFieldBlock = function (_cls$AbstractSetField) {\n    _inherits(_class15, _cls$AbstractSetField);\n\n    function _class15() {\n      _classCallCheck(this, _class15);\n\n      return _possibleConstructorReturn(this, Object.getPrototypeOf(_class15).apply(this, arguments));\n    }\n\n    _createClass(_class15, [{\n      key: 'set',\n      value: function set(field, value, options) {\n        this._set(field, value, options);\n      }\n    }, {\n      key: 'setFields',\n      value: function setFields(fields, valueOptions) {\n        this._setFields(fields, valueOptions);\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n        var buildParameterized = options.buildParameterized;\n\n\n        if (0 >= this._fields.length) {\n          throw new Error(\"set() needs to be called\");\n        }\n\n        var totalStr = '',\n            totalValues = [];\n\n        for (var i = 0; i < this._fields.length; ++i) {\n          totalStr = _pad(totalStr, ', ');\n\n          var field = this._formatFieldName(this._fields[i]);\n          var value = this._values[0][i];\n\n          // e.g. field can be an expression such as `count = count + 1`\n          if (0 > field.indexOf('=')) {\n            field = field + ' = ' + this.options.parameterCharacter;\n          }\n\n          var ret = this._buildString(field, [value], {\n            buildParameterized: buildParameterized,\n            formattingOptions: this._valueOptions[0][i]\n          });\n\n          totalStr += ret.text;\n          ret.values.forEach(function (value) {\n            return totalValues.push(value);\n          });\n        }\n\n        return {\n          text: 'SET ' + totalStr,\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class15;\n  }(cls.AbstractSetFieldBlock);\n\n  // (INSERT INTO) ... field ... value\n  cls.InsertFieldValueBlock = function (_cls$AbstractSetField2) {\n    _inherits(_class16, _cls$AbstractSetField2);\n\n    function _class16() {\n      _classCallCheck(this, _class16);\n\n      return _possibleConstructorReturn(this, Object.getPrototypeOf(_class16).apply(this, arguments));\n    }\n\n    _createClass(_class16, [{\n      key: 'set',\n      value: function set(field, value) {\n        var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n        this._set(field, value, options);\n      }\n    }, {\n      key: 'setFields',\n      value: function setFields(fields, valueOptions) {\n        this._setFields(fields, valueOptions);\n      }\n    }, {\n      key: 'setFieldsRows',\n      value: function setFieldsRows(fieldsRows, valueOptions) {\n        this._setFieldsRows(fieldsRows, valueOptions);\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var _this19 = this;\n\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n        var buildParameterized = options.buildParameterized;\n\n\n        var fieldString = this._fields.map(function (f) {\n          return _this19._formatFieldName(f);\n        }).join(', ');\n\n        var valueStrings = [],\n            totalValues = [];\n\n        for (var i = 0; i < this._values.length; ++i) {\n          valueStrings[i] = '';\n\n          for (var j = 0; j < this._values[i].length; ++j) {\n            var ret = this._buildString(this.options.parameterCharacter, [this._values[i][j]], {\n              buildParameterized: buildParameterized,\n              formattingOptions: this._valueOptions[i][j]\n            });\n\n            ret.values.forEach(function (value) {\n              return totalValues.push(value);\n            });\n\n            valueStrings[i] = _pad(valueStrings[i], ', ');\n            valueStrings[i] += ret.text;\n          }\n        }\n\n        return {\n          text: fieldString.length ? '(' + fieldString + ') VALUES (' + valueStrings.join('), (') + ')' : '',\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class16;\n  }(cls.AbstractSetFieldBlock);\n\n  // (INSERT INTO) ... field ... (SELECT ... FROM ...)\n  cls.InsertFieldsFromQueryBlock = function (_cls$Block6) {\n    _inherits(_class17, _cls$Block6);\n\n    function _class17(options) {\n      _classCallCheck(this, _class17);\n\n      var _this20 = _possibleConstructorReturn(this, Object.getPrototypeOf(_class17).call(this, options));\n\n      _this20._fields = [];\n      _this20._query = null;\n      return _this20;\n    }\n\n    _createClass(_class17, [{\n      key: 'fromQuery',\n      value: function fromQuery(fields, selectQuery) {\n        var _this21 = this;\n\n        this._fields = fields.map(function (v) {\n          return _this21._sanitizeField(v);\n        });\n\n        this._query = this._sanitizeBaseBuilder(selectQuery);\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n        var totalStr = '',\n            totalValues = [];\n\n        if (this._fields.length && this._query) {\n          var _query$_toParamString = this._query._toParamString({\n            buildParameterized: options.buildParameterized,\n            nested: true\n          });\n\n          var text = _query$_toParamString.text;\n          var values = _query$_toParamString.values;\n\n\n          totalStr = '(' + this._fields.join(', ') + ') ' + this._applyNestingFormatting(text);\n          totalValues = values;\n        }\n\n        return {\n          text: totalStr,\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class17;\n  }(cls.Block);\n\n  // DISTINCT\n  cls.DistinctBlock = function (_cls$Block7) {\n    _inherits(_class18, _cls$Block7);\n\n    function _class18() {\n      _classCallCheck(this, _class18);\n\n      return _possibleConstructorReturn(this, Object.getPrototypeOf(_class18).apply(this, arguments));\n    }\n\n    _createClass(_class18, [{\n      key: 'distinct',\n\n      // Add the DISTINCT keyword to the query.\n      value: function distinct() {\n        this._useDistinct = true;\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        return {\n          text: this._useDistinct ? \"DISTINCT\" : \"\",\n          values: []\n        };\n      }\n    }]);\n\n    return _class18;\n  }(cls.Block);\n\n  // GROUP BY\n  cls.GroupByBlock = function (_cls$Block8) {\n    _inherits(_class19, _cls$Block8);\n\n    function _class19(options) {\n      _classCallCheck(this, _class19);\n\n      var _this23 = _possibleConstructorReturn(this, Object.getPrototypeOf(_class19).call(this, options));\n\n      _this23._groups = [];\n      return _this23;\n    }\n\n    // Add a GROUP BY transformation for the given field.\n\n\n    _createClass(_class19, [{\n      key: 'group',\n      value: function group(field) {\n        this._groups.push(this._sanitizeField(field));\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n        return {\n          text: this._groups.length ? 'GROUP BY ' + this._groups.join(', ') : '',\n          values: []\n        };\n      }\n    }]);\n\n    return _class19;\n  }(cls.Block);\n\n  cls.AbstractVerbSingleValueBlock = function (_cls$Block9) {\n    _inherits(_class20, _cls$Block9);\n\n    /**\n     * @param options.verb The prefix verb string.\n     */\n\n    function _class20(options) {\n      _classCallCheck(this, _class20);\n\n      var _this24 = _possibleConstructorReturn(this, Object.getPrototypeOf(_class20).call(this, options));\n\n      _this24._value = 0;\n      return _this24;\n    }\n\n    _createClass(_class20, [{\n      key: '_setValue',\n      value: function _setValue(value) {\n        this._value = this._sanitizeLimitOffset(value);\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n        var expr = 0 < this._value ? this.options.verb + ' ' + this.options.parameterCharacter : '';\n\n        var values = null !== this._value ? [this._value] : [];\n\n        return this._buildString(expr, values, options);\n      }\n    }]);\n\n    return _class20;\n  }(cls.Block);\n\n  // OFFSET x\n  cls.OffsetBlock = function (_cls$AbstractVerbSing) {\n    _inherits(_class21, _cls$AbstractVerbSing);\n\n    function _class21(options) {\n      _classCallCheck(this, _class21);\n\n      return _possibleConstructorReturn(this, Object.getPrototypeOf(_class21).call(this, _extend({}, options, {\n        verb: 'OFFSET'\n      })));\n    }\n\n    /**\n    # Set the OFFSET transformation.\n    #\n    # Call this will override the previously set offset for this query. Also note that Passing 0 for 'max' will remove\n    # the offset.\n    */\n\n\n    _createClass(_class21, [{\n      key: 'offset',\n      value: function offset(start) {\n        this._setValue(start);\n      }\n    }]);\n\n    return _class21;\n  }(cls.AbstractVerbSingleValueBlock);\n\n  // LIMIT\n  cls.LimitBlock = function (_cls$AbstractVerbSing2) {\n    _inherits(_class22, _cls$AbstractVerbSing2);\n\n    function _class22(options) {\n      _classCallCheck(this, _class22);\n\n      return _possibleConstructorReturn(this, Object.getPrototypeOf(_class22).call(this, _extend({}, options, {\n        verb: 'LIMIT'\n      })));\n    }\n\n    /**\n    # Set the LIMIT transformation.\n    #\n    # Call this will override the previously set limit for this query. Also note that Passing 0 for 'max' will remove\n    # the limit.\n    */\n\n\n    _createClass(_class22, [{\n      key: 'limit',\n      value: function limit(_limit2) {\n        this._setValue(_limit2);\n      }\n    }]);\n\n    return _class22;\n  }(cls.AbstractVerbSingleValueBlock);\n\n  // Abstract condition base class\n  cls.AbstractConditionBlock = function (_cls$Block10) {\n    _inherits(_class23, _cls$Block10);\n\n    /**\n     * @param {String} options.verb The condition verb.\n     */\n\n    function _class23(options) {\n      _classCallCheck(this, _class23);\n\n      var _this27 = _possibleConstructorReturn(this, Object.getPrototypeOf(_class23).call(this, options));\n\n      _this27._conditions = [];\n      return _this27;\n    }\n\n    /**\n    # Add a condition.\n    #\n    # When the final query is constructed all the conditions are combined using the intersection (AND) operator.\n    #\n    # Concrete subclasses should provide a method which calls this\n    */\n\n\n    _createClass(_class23, [{\n      key: '_condition',\n      value: function _condition(condition) {\n        condition = this._sanitizeExpression(condition);\n\n        for (var _len6 = arguments.length, values = Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n          values[_key6 - 1] = arguments[_key6];\n        }\n\n        this._conditions.push({\n          expr: condition,\n          values: values || []\n        });\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n        var totalStr = [],\n            totalValues = [];\n\n        var _iteratorNormalCompletion8 = true;\n        var _didIteratorError8 = false;\n        var _iteratorError8 = undefined;\n\n        try {\n          for (var _iterator8 = this._conditions[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n            var _step8$value = _step8.value;\n            var expr = _step8$value.expr;\n            var _values2 = _step8$value.values;\n\n            var ret = cls.isSquelBuilder(expr) ? expr._toParamString({\n              buildParameterized: options.buildParameterized\n            }) : this._buildString(expr, _values2, {\n              buildParameterized: options.buildParameterized\n            });\n\n            if (ret.text.length) {\n              totalStr.push(ret.text);\n            }\n\n            ret.values.forEach(function (value) {\n              return totalValues.push(value);\n            });\n          }\n        } catch (err) {\n          _didIteratorError8 = true;\n          _iteratorError8 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion8 && _iterator8.return) {\n              _iterator8.return();\n            }\n          } finally {\n            if (_didIteratorError8) {\n              throw _iteratorError8;\n            }\n          }\n        }\n\n        if (totalStr.length) {\n          totalStr = totalStr.join(') AND (');\n        }\n\n        return {\n          text: totalStr.length ? this.options.verb + ' (' + totalStr + ')' : '',\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class23;\n  }(cls.Block);\n\n  // WHERE\n  cls.WhereBlock = function (_cls$AbstractConditio) {\n    _inherits(_class24, _cls$AbstractConditio);\n\n    function _class24(options) {\n      _classCallCheck(this, _class24);\n\n      return _possibleConstructorReturn(this, Object.getPrototypeOf(_class24).call(this, _extend({}, options, {\n        verb: 'WHERE'\n      })));\n    }\n\n    _createClass(_class24, [{\n      key: 'where',\n      value: function where(condition) {\n        for (var _len7 = arguments.length, values = Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n          values[_key7 - 1] = arguments[_key7];\n        }\n\n        this._condition.apply(this, [condition].concat(values));\n      }\n    }]);\n\n    return _class24;\n  }(cls.AbstractConditionBlock);\n\n  // HAVING\n  cls.HavingBlock = function (_cls$AbstractConditio2) {\n    _inherits(_class25, _cls$AbstractConditio2);\n\n    function _class25(options) {\n      _classCallCheck(this, _class25);\n\n      return _possibleConstructorReturn(this, Object.getPrototypeOf(_class25).call(this, _extend({}, options, {\n        verb: 'HAVING'\n      })));\n    }\n\n    _createClass(_class25, [{\n      key: 'having',\n      value: function having(condition) {\n        for (var _len8 = arguments.length, values = Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n          values[_key8 - 1] = arguments[_key8];\n        }\n\n        this._condition.apply(this, [condition].concat(values));\n      }\n    }]);\n\n    return _class25;\n  }(cls.AbstractConditionBlock);\n\n  // ORDER BY\n  cls.OrderByBlock = function (_cls$Block11) {\n    _inherits(_class26, _cls$Block11);\n\n    function _class26(options) {\n      _classCallCheck(this, _class26);\n\n      var _this30 = _possibleConstructorReturn(this, Object.getPrototypeOf(_class26).call(this, options));\n\n      _this30._orders = [];\n      return _this30;\n    }\n\n    /**\n    # Add an ORDER BY transformation for the given field in the given order.\n    #\n    # To specify descending order pass false for the 'dir' parameter.\n    */\n\n\n    _createClass(_class26, [{\n      key: 'order',\n      value: function order(field, dir) {\n        field = this._sanitizeField(field);\n\n        if (!(typeof dir === 'string')) {\n          if (dir === undefined) {\n            dir = 'ASC'; // Default to asc\n          } else if (dir !== null) {\n              dir = dir ? 'ASC' : 'DESC'; // Convert truthy to asc\n            }\n        }\n\n        for (var _len9 = arguments.length, values = Array(_len9 > 2 ? _len9 - 2 : 0), _key9 = 2; _key9 < _len9; _key9++) {\n          values[_key9 - 2] = arguments[_key9];\n        }\n\n        this._orders.push({\n          field: field,\n          dir: dir,\n          values: values || []\n        });\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n        var totalStr = '',\n            totalValues = [];\n\n        var _iteratorNormalCompletion9 = true;\n        var _didIteratorError9 = false;\n        var _iteratorError9 = undefined;\n\n        try {\n          for (var _iterator9 = this._orders[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n            var _step9$value = _step9.value;\n            var field = _step9$value.field;\n            var dir = _step9$value.dir;\n            var _values3 = _step9$value.values;\n\n            totalStr = _pad(totalStr, ', ');\n\n            var ret = this._buildString(field, _values3, {\n              buildParameterized: options.buildParameterized\n            });\n\n            totalStr += ret.text, _isArray(ret.values) && ret.values.forEach(function (value) {\n              return totalValues.push(value);\n            });\n\n            if (dir !== null) {\n              totalStr += ' ' + dir;\n            }\n          }\n        } catch (err) {\n          _didIteratorError9 = true;\n          _iteratorError9 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion9 && _iterator9.return) {\n              _iterator9.return();\n            }\n          } finally {\n            if (_didIteratorError9) {\n              throw _iteratorError9;\n            }\n          }\n        }\n\n        return {\n          text: totalStr.length ? 'ORDER BY ' + totalStr : '',\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class26;\n  }(cls.Block);\n\n  // JOIN\n  cls.JoinBlock = function (_cls$Block12) {\n    _inherits(_class27, _cls$Block12);\n\n    function _class27(options) {\n      _classCallCheck(this, _class27);\n\n      var _this31 = _possibleConstructorReturn(this, Object.getPrototypeOf(_class27).call(this, options));\n\n      _this31._joins = [];\n      return _this31;\n    }\n\n    /**\n    # Add a JOIN with the given table.\n    #\n    # 'table' is the name of the table to join with.\n    #\n    # 'alias' is an optional alias for the table name.\n    #\n    # 'condition' is an optional condition (containing an SQL expression) for the JOIN.\n    #\n    # 'type' must be either one of INNER, OUTER, LEFT or RIGHT. Default is 'INNER'.\n    #\n    */\n\n\n    _createClass(_class27, [{\n      key: 'join',\n      value: function join(table) {\n        var alias = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n        var condition = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];\n        var type = arguments.length <= 3 || arguments[3] === undefined ? 'INNER' : arguments[3];\n\n        table = this._sanitizeTable(table, true);\n        alias = alias ? this._sanitizeTableAlias(alias) : alias;\n        condition = condition ? this._sanitizeExpression(condition) : condition;\n\n        this._joins.push({\n          type: type,\n          table: table,\n          alias: alias,\n          condition: condition\n        });\n      }\n    }, {\n      key: 'left_join',\n      value: function left_join(table) {\n        var alias = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n        var condition = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];\n\n        this.join(table, alias, condition, 'LEFT');\n      }\n    }, {\n      key: 'right_join',\n      value: function right_join(table) {\n        var alias = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n        var condition = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];\n\n        this.join(table, alias, condition, 'RIGHT');\n      }\n    }, {\n      key: 'outer_join',\n      value: function outer_join(table) {\n        var alias = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n        var condition = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];\n\n        this.join(table, alias, condition, 'OUTER');\n      }\n    }, {\n      key: 'left_outer_join',\n      value: function left_outer_join(table) {\n        var alias = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n        var condition = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];\n\n        this.join(table, alias, condition, 'LEFT OUTER');\n      }\n    }, {\n      key: 'full_join',\n      value: function full_join(table) {\n        var alias = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n        var condition = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];\n\n        this.join(table, alias, condition, 'FULL');\n      }\n    }, {\n      key: 'cross_join',\n      value: function cross_join(table) {\n        var alias = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n        var condition = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];\n\n        this.join(table, alias, condition, 'CROSS');\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n        var totalStr = \"\",\n            totalValues = [];\n\n        var _iteratorNormalCompletion10 = true;\n        var _didIteratorError10 = false;\n        var _iteratorError10 = undefined;\n\n        try {\n          for (var _iterator10 = this._joins[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n            var _step10$value = _step10.value;\n            var type = _step10$value.type;\n            var table = _step10$value.table;\n            var alias = _step10$value.alias;\n            var condition = _step10$value.condition;\n\n            totalStr = _pad(totalStr, this.options.separator);\n\n            var tableStr = void 0;\n\n            if (cls.isSquelBuilder(table)) {\n              var ret = table._toParamString({\n                buildParameterized: options.buildParameterized,\n                nested: true\n              });\n\n              ret.values.forEach(function (value) {\n                return totalValues.push(value);\n              });\n              tableStr = ret.text;\n            } else {\n              tableStr = this._formatTableName(table);\n            }\n\n            totalStr += type + ' JOIN ' + tableStr;\n\n            if (alias) {\n              totalStr += ' ' + this._formatTableAlias(alias);\n            }\n\n            if (condition) {\n              totalStr += ' ON ';\n\n              var _ret4 = void 0;\n\n              if (cls.isSquelBuilder(condition)) {\n                _ret4 = condition._toParamString({\n                  buildParameterized: options.buildParameterized\n                });\n              } else {\n                _ret4 = this._buildString(condition, [], {\n                  buildParameterized: options.buildParameterized\n                });\n              }\n\n              totalStr += this._applyNestingFormatting(_ret4.text);\n              _ret4.values.forEach(function (value) {\n                return totalValues.push(value);\n              });\n            }\n          }\n        } catch (err) {\n          _didIteratorError10 = true;\n          _iteratorError10 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion10 && _iterator10.return) {\n              _iterator10.return();\n            }\n          } finally {\n            if (_didIteratorError10) {\n              throw _iteratorError10;\n            }\n          }\n        }\n\n        return {\n          text: totalStr,\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class27;\n  }(cls.Block);\n\n  // UNION\n  cls.UnionBlock = function (_cls$Block13) {\n    _inherits(_class28, _cls$Block13);\n\n    function _class28(options) {\n      _classCallCheck(this, _class28);\n\n      var _this32 = _possibleConstructorReturn(this, Object.getPrototypeOf(_class28).call(this, options));\n\n      _this32._unions = [];\n      return _this32;\n    }\n\n    /**\n    # Add a UNION with the given table/query.\n    #\n    # 'table' is the name of the table or query to union with.\n    #\n    # 'type' must be either one of UNION or UNION ALL.... Default is 'UNION'.\n    */\n\n\n    _createClass(_class28, [{\n      key: 'union',\n      value: function union(table) {\n        var type = arguments.length <= 1 || arguments[1] === undefined ? 'UNION' : arguments[1];\n\n        table = this._sanitizeTable(table);\n\n        this._unions.push({\n          type: type,\n          table: table\n        });\n      }\n\n      // Add a UNION ALL with the given table/query.\n\n    }, {\n      key: 'union_all',\n      value: function union_all(table) {\n        this.union(table, 'UNION ALL');\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n        var totalStr = '',\n            totalValues = [];\n\n        var _iteratorNormalCompletion11 = true;\n        var _didIteratorError11 = false;\n        var _iteratorError11 = undefined;\n\n        try {\n          for (var _iterator11 = this._unions[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n            var _step11$value = _step11.value;\n            var type = _step11$value.type;\n            var table = _step11$value.table;\n\n            totalStr = _pad(totalStr, this.options.separator);\n\n            var tableStr = void 0;\n\n            if (table instanceof cls.BaseBuilder) {\n              var ret = table._toParamString({\n                buildParameterized: options.buildParameterized,\n                nested: true\n              });\n\n              tableStr = ret.text;\n              ret.values.forEach(function (value) {\n                return totalValues.push(value);\n              });\n            } else {\n              totalStr = this._formatTableName(table);\n            }\n\n            totalStr += type + ' ' + tableStr;\n          }\n        } catch (err) {\n          _didIteratorError11 = true;\n          _iteratorError11 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion11 && _iterator11.return) {\n              _iterator11.return();\n            }\n          } finally {\n            if (_didIteratorError11) {\n              throw _iteratorError11;\n            }\n          }\n        }\n\n        return {\n          text: totalStr,\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class28;\n  }(cls.Block);\n\n  /*\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  # Query builders\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  */\n\n  /**\n  # Query builder base class\n  #\n  # Note that the query builder does not check the final query string for correctness.\n  #\n  # All the build methods in this object return the object instance for chained method calling purposes.\n  */\n  cls.QueryBuilder = function (_cls$BaseBuilder4) {\n    _inherits(_class29, _cls$BaseBuilder4);\n\n    /**\n    # Constructor\n    #\n    # blocks - array of cls.BaseBuilderBlock instances to build the query with.\n    */\n\n    function _class29(options, blocks) {\n      _classCallCheck(this, _class29);\n\n      var _this33 = _possibleConstructorReturn(this, Object.getPrototypeOf(_class29).call(this, options));\n\n      _this33.blocks = blocks || [];\n\n      // Copy exposed methods into myself\n      var _iteratorNormalCompletion12 = true;\n      var _didIteratorError12 = false;\n      var _iteratorError12 = undefined;\n\n      try {\n        for (var _iterator12 = _this33.blocks[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {\n          var block = _step12.value;\n\n          var exposedMethods = block.exposedMethods();\n\n          for (var methodName in exposedMethods) {\n            var methodBody = exposedMethods[methodName];\n\n            if (undefined !== _this33[methodName]) {\n              throw new Error('Builder already has a builder method called: ' + methodName);\n            }\n\n            (function (block, name, body) {\n              _this33[name] = function () {\n                for (var _len10 = arguments.length, args = Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n                  args[_key10] = arguments[_key10];\n                }\n\n                body.call.apply(body, [block].concat(args));\n\n                return _this33;\n              };\n            })(block, methodName, methodBody);\n          }\n        }\n      } catch (err) {\n        _didIteratorError12 = true;\n        _iteratorError12 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion12 && _iterator12.return) {\n            _iterator12.return();\n          }\n        } finally {\n          if (_didIteratorError12) {\n            throw _iteratorError12;\n          }\n        }\n      }\n\n      return _this33;\n    }\n\n    /**\n    # Register a custom value handler for this query builder and all its contained blocks.\n    #\n    # Note: This will override any globally registered handler for this value type.\n    */\n\n\n    _createClass(_class29, [{\n      key: 'registerValueHandler',\n      value: function registerValueHandler(type, handler) {\n        var _iteratorNormalCompletion13 = true;\n        var _didIteratorError13 = false;\n        var _iteratorError13 = undefined;\n\n        try {\n          for (var _iterator13 = this.blocks[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {\n            var block = _step13.value;\n\n            block.registerValueHandler(type, handler);\n          }\n        } catch (err) {\n          _didIteratorError13 = true;\n          _iteratorError13 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion13 && _iterator13.return) {\n              _iterator13.return();\n            }\n          } finally {\n            if (_didIteratorError13) {\n              throw _iteratorError13;\n            }\n          }\n        }\n\n        _get(Object.getPrototypeOf(_class29.prototype), 'registerValueHandler', this).call(this, type, handler);\n\n        return this;\n      }\n\n      /**\n      # Update query builder options\n      #\n      # This will update the options for all blocks too. Use this method with caution as it allows you to change the\n      # behaviour of your query builder mid-build.\n      */\n\n    }, {\n      key: 'updateOptions',\n      value: function updateOptions(options) {\n        this.options = _extend({}, this.options, options);\n\n        var _iteratorNormalCompletion14 = true;\n        var _didIteratorError14 = false;\n        var _iteratorError14 = undefined;\n\n        try {\n          for (var _iterator14 = this.blocks[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {\n            var block = _step14.value;\n\n            block.options = _extend({}, block.options, options);\n          }\n        } catch (err) {\n          _didIteratorError14 = true;\n          _iteratorError14 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion14 && _iterator14.return) {\n              _iterator14.return();\n            }\n          } finally {\n            if (_didIteratorError14) {\n              throw _iteratorError14;\n            }\n          }\n        }\n      }\n\n      // Get the final fully constructed query param obj.\n\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var _this34 = this;\n\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n        options = _extend({}, this.options, options);\n\n        var blockResults = this.blocks.map(function (b) {\n          return b._toParamString({\n            buildParameterized: options.buildParameterized,\n            queryBuilder: _this34\n          });\n        });\n\n        var blockTexts = blockResults.map(function (b) {\n          return b.text;\n        });\n        var blockValues = blockResults.map(function (b) {\n          return b.values;\n        });\n\n        var totalStr = blockTexts.filter(function (v) {\n          return 0 < v.length;\n        }).join(options.separator);\n\n        var totalValues = [];\n        blockValues.forEach(function (block) {\n          return block.forEach(function (value) {\n            return totalValues.push(value);\n          });\n        });\n\n        if (!options.nested) {\n          if (options.numberedParameters) {\n            (function () {\n              var i = undefined !== options.numberedParametersStartAt ? options.numberedParametersStartAt : 1;\n\n              // construct regex for searching\n              var regex = options.parameterCharacter.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n\n              totalStr = totalStr.replace(new RegExp(regex, 'g'), function () {\n                return '' + options.numberedParametersPrefix + i++;\n              });\n            })();\n          }\n        }\n\n        return {\n          text: this._applyNestingFormatting(totalStr, !!options.nested),\n          values: totalValues\n        };\n      }\n\n      // Deep clone\n\n    }, {\n      key: 'clone',\n      value: function clone() {\n        var blockClones = this.blocks.map(function (v) {\n          return v.clone();\n        });\n\n        return new this.constructor(this.options, blockClones);\n      }\n\n      // Get a specific block\n\n    }, {\n      key: 'getBlock',\n      value: function getBlock(blockType) {\n        var filtered = this.blocks.filter(function (b) {\n          return b instanceof blockType;\n        });\n\n        return filtered[0];\n      }\n    }]);\n\n    return _class29;\n  }(cls.BaseBuilder);\n\n  // SELECT query builder.\n  cls.Select = function (_cls$QueryBuilder) {\n    _inherits(_class30, _cls$QueryBuilder);\n\n    function _class30(options) {\n      var blocks = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n\n      _classCallCheck(this, _class30);\n\n      blocks = blocks || [new cls.StringBlock(options, 'SELECT'), new cls.FunctionBlock(options), new cls.DistinctBlock(options), new cls.GetFieldBlock(options), new cls.FromTableBlock(options), new cls.JoinBlock(options), new cls.WhereBlock(options), new cls.GroupByBlock(options), new cls.HavingBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options), new cls.OffsetBlock(options), new cls.UnionBlock(options)];\n\n      return _possibleConstructorReturn(this, Object.getPrototypeOf(_class30).call(this, options, blocks));\n    }\n\n    return _class30;\n  }(cls.QueryBuilder);\n\n  // UPDATE query builder.\n  cls.Update = function (_cls$QueryBuilder2) {\n    _inherits(_class31, _cls$QueryBuilder2);\n\n    function _class31(options) {\n      var blocks = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n\n      _classCallCheck(this, _class31);\n\n      blocks = blocks || [new cls.StringBlock(options, 'UPDATE'), new cls.UpdateTableBlock(options), new cls.SetFieldBlock(options), new cls.WhereBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options)];\n\n      return _possibleConstructorReturn(this, Object.getPrototypeOf(_class31).call(this, options, blocks));\n    }\n\n    return _class31;\n  }(cls.QueryBuilder);\n\n  // DELETE query builder.\n  cls.Delete = function (_cls$QueryBuilder3) {\n    _inherits(_class32, _cls$QueryBuilder3);\n\n    function _class32(options) {\n      var blocks = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n\n      _classCallCheck(this, _class32);\n\n      blocks = blocks || [new cls.StringBlock(options, 'DELETE'), new cls.TargetTableBlock(options), new cls.FromTableBlock(_extend({}, options, {\n        singleTable: true\n      })), new cls.JoinBlock(options), new cls.WhereBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options)];\n\n      return _possibleConstructorReturn(this, Object.getPrototypeOf(_class32).call(this, options, blocks));\n    }\n\n    return _class32;\n  }(cls.QueryBuilder);\n\n  // An INSERT query builder.\n  cls.Insert = function (_cls$QueryBuilder4) {\n    _inherits(_class33, _cls$QueryBuilder4);\n\n    function _class33(options) {\n      var blocks = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n\n      _classCallCheck(this, _class33);\n\n      blocks = blocks || [new cls.StringBlock(options, 'INSERT'), new cls.IntoTableBlock(options), new cls.InsertFieldValueBlock(options), new cls.InsertFieldsFromQueryBlock(options)];\n\n      return _possibleConstructorReturn(this, Object.getPrototypeOf(_class33).call(this, options, blocks));\n    }\n\n    return _class33;\n  }(cls.QueryBuilder);\n\n  var _squel = {\n    VERSION: '5.9.1',\n    flavour: flavour,\n    expr: function expr(options) {\n      return new cls.Expression(options);\n    },\n    case: function _case(name, options) {\n      return new cls.Case(name, options);\n    },\n    select: function select(options, blocks) {\n      return new cls.Select(options, blocks);\n    },\n    update: function update(options, blocks) {\n      return new cls.Update(options, blocks);\n    },\n    insert: function insert(options, blocks) {\n      return new cls.Insert(options, blocks);\n    },\n    delete: function _delete(options, blocks) {\n      return new cls.Delete(options, blocks);\n    },\n    str: function str() {\n      var inst = new cls.FunctionBlock();\n      inst.function.apply(inst, arguments);\n      return inst;\n    },\n    rstr: function rstr() {\n      var inst = new cls.FunctionBlock({\n        rawNesting: true\n      });\n      inst.function.apply(inst, arguments);\n      return inst;\n    },\n    registerValueHandler: cls.registerValueHandler\n  };\n\n  // aliases\n  _squel.remove = _squel.delete;\n\n  // classes\n  _squel.cls = cls;\n\n  return _squel;\n}\n\n/**\n# ---------------------------------------------------------------------------------------------------------\n# ---------------------------------------------------------------------------------------------------------\n# Exported instance (and for use by flavour definitions further down).\n# ---------------------------------------------------------------------------------------------------------\n# ---------------------------------------------------------------------------------------------------------\n*/\n\nvar squel = _buildSquel();\n\n/**\n# ---------------------------------------------------------------------------------------------------------\n# ---------------------------------------------------------------------------------------------------------\n# Squel SQL flavours\n# ---------------------------------------------------------------------------------------------------------\n# ---------------------------------------------------------------------------------------------------------\n*/\n\n// Available flavours\nsquel.flavours = {};\n\n// Setup Squel for a particular SQL flavour\nsquel.useFlavour = function () {\n  var flavour = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];\n\n  if (!flavour) {\n    return squel;\n  }\n\n  if (squel.flavours[flavour] instanceof Function) {\n    var s = _buildSquel(flavour);\n\n    squel.flavours[flavour].call(null, s);\n\n    // add in flavour methods\n    s.flavours = squel.flavours;\n    s.useFlavour = squel.useFlavour;\n\n    return s;\n  } else {\n    throw new Error('Flavour not available: ' + flavour);\n  }\n};\n\nsquel.flavours['mssql'] = function (_squel) {\n  var cls = _squel.cls;\n\n  cls.DefaultQueryBuilderOptions.replaceSingleQuotes = true;\n  cls.DefaultQueryBuilderOptions.autoQuoteAliasNames = false;\n  cls.DefaultQueryBuilderOptions.numberedParametersPrefix = '@';\n\n  _squel.registerValueHandler(Date, function (date) {\n    return '\\'' + date.getUTCFullYear() + '-' + (date.getUTCMonth() + 1) + '-' + date.getUTCDate() + ' ' + date.getUTCHours() + ':' + date.getUTCMinutes() + ':' + date.getUTCSeconds() + '\\'';\n  });\n\n  //�LIMIT,  OFFSET x and TOP x\n  cls.MssqlLimitOffsetTopBlock = function (_cls$Block14) {\n    _inherits(_class34, _cls$Block14);\n\n    function _class34(options) {\n      _classCallCheck(this, _class34);\n\n      var _this39 = _possibleConstructorReturn(this, Object.getPrototypeOf(_class34).call(this, options));\n\n      _this39._limits = null;\n      _this39._offsets = null;\n\n      // This is setup as one block to return many as they all have to use each others data at different times\n      // The build String of EITHER LIMIT OR TOP should execute, never both.\n\n      /**\n      # Set the LIMIT/TOP transformation.\n      #\n      # Call this will override the previously set limit for this query. Also note that Passing 0 for 'max' will remove\n      # the limit.\n      */\n      var _limit = function _limit(max) {\n        max = this._sanitizeLimitOffset(max);\n        this._parent._limits = max;\n      };\n\n      _this39.ParentBlock = function (_cls$Block15) {\n        _inherits(_class35, _cls$Block15);\n\n        function _class35(parent) {\n          _classCallCheck(this, _class35);\n\n          var _this40 = _possibleConstructorReturn(this, Object.getPrototypeOf(_class35).call(this, parent.options));\n\n          _this40._parent = parent;\n          return _this40;\n        }\n\n        return _class35;\n      }(cls.Block);\n\n      _this39.LimitBlock = function (_this39$ParentBlock) {\n        _inherits(_class36, _this39$ParentBlock);\n\n        function _class36(parent) {\n          _classCallCheck(this, _class36);\n\n          var _this41 = _possibleConstructorReturn(this, Object.getPrototypeOf(_class36).call(this, parent));\n\n          _this41.limit = _limit;\n          return _this41;\n        }\n\n        _createClass(_class36, [{\n          key: '_toParamString',\n          value: function _toParamString() {\n            var str = \"\";\n\n            if (this._parent._limits && this._parent._offsets) {\n              str = 'FETCH NEXT ' + this._parent._limits + ' ROWS ONLY';\n            }\n\n            return {\n              text: str,\n              values: []\n            };\n          }\n        }]);\n\n        return _class36;\n      }(_this39.ParentBlock);\n\n      _this39.TopBlock = function (_this39$ParentBlock2) {\n        _inherits(_class37, _this39$ParentBlock2);\n\n        function _class37(parent) {\n          _classCallCheck(this, _class37);\n\n          var _this42 = _possibleConstructorReturn(this, Object.getPrototypeOf(_class37).call(this, parent));\n\n          _this42.top = _limit;\n          return _this42;\n        }\n\n        _createClass(_class37, [{\n          key: '_toParamString',\n          value: function _toParamString() {\n            var str = \"\";\n\n            if (this._parent._limits && !this._parent._offsets) {\n              str = 'TOP (' + this._parent._limits + ')';\n            }\n\n            return {\n              text: str,\n              values: []\n            };\n          }\n        }]);\n\n        return _class37;\n      }(_this39.ParentBlock);\n\n      _this39.OffsetBlock = function (_this39$ParentBlock3) {\n        _inherits(_class38, _this39$ParentBlock3);\n\n        function _class38() {\n          _classCallCheck(this, _class38);\n\n          return _possibleConstructorReturn(this, Object.getPrototypeOf(_class38).apply(this, arguments));\n        }\n\n        _createClass(_class38, [{\n          key: 'offset',\n          value: function offset(start) {\n            this._parent._offsets = this._sanitizeLimitOffset(start);\n          }\n        }, {\n          key: '_toParamString',\n          value: function _toParamString() {\n            var str = \"\";\n\n            if (this._parent._offsets) {\n              str = 'OFFSET ' + this._parent._offsets + ' ROWS';\n            }\n\n            return {\n              text: str,\n              values: []\n            };\n          }\n        }]);\n\n        return _class38;\n      }(_this39.ParentBlock);\n      return _this39;\n    }\n\n    _createClass(_class34, [{\n      key: 'LIMIT',\n      value: function LIMIT() {\n        return new this.LimitBlock(this);\n      }\n    }, {\n      key: 'TOP',\n      value: function TOP() {\n        return new this.TopBlock(this);\n      }\n    }, {\n      key: 'OFFSET',\n      value: function OFFSET() {\n        return new this.OffsetBlock(this);\n      }\n    }]);\n\n    return _class34;\n  }(cls.Block);\n\n  cls.MssqlUpdateTopBlock = function (_cls$Block16) {\n    _inherits(_class39, _cls$Block16);\n\n    function _class39(options) {\n      _classCallCheck(this, _class39);\n\n      var _this44 = _possibleConstructorReturn(this, Object.getPrototypeOf(_class39).call(this, options));\n\n      _this44._limits = null;\n\n      _this44.limit = _this44.top = function (max) {\n        _this44._limits = _this44._sanitizeLimitOffset(max);\n      };\n      return _this44;\n    }\n\n    _createClass(_class39, [{\n      key: '_toParamString',\n      value: function _toParamString() {\n        return {\n          text: this._limits ? 'TOP (' + this._limits + ')' : \"\",\n          values: []\n        };\n      }\n    }]);\n\n    return _class39;\n  }(cls.Block);\n\n  cls.MssqlInsertFieldValueBlock = function (_cls$InsertFieldValue) {\n    _inherits(_class40, _cls$InsertFieldValue);\n\n    function _class40(options) {\n      _classCallCheck(this, _class40);\n\n      var _this45 = _possibleConstructorReturn(this, Object.getPrototypeOf(_class40).call(this, options));\n\n      _this45._outputs = [];\n      return _this45;\n    }\n\n    // add fields to the output clause\n\n\n    _createClass(_class40, [{\n      key: 'output',\n      value: function output(fields) {\n        var _this46 = this;\n\n        if ('string' === typeof fields) {\n          this._outputs.push('INSERTED.' + this._sanitizeField(fields));\n        } else {\n          fields.forEach(function (f) {\n            _this46._outputs.push('INSERTED.' + _this46._sanitizeField(f));\n          });\n        }\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString(options) {\n        var ret = _get(Object.getPrototypeOf(_class40.prototype), '_toParamString', this).call(this, options);\n\n        if (ret.text.length && 0 < this._outputs.length) {\n          var innerStr = 'OUTPUT ' + this._outputs.join(', ') + ' ';\n\n          var valuesPos = ret.text.indexOf('VALUES');\n\n          ret.text = ret.text.substr(0, valuesPos) + innerStr + ret.text.substr(valuesPos);\n        }\n\n        return ret;\n      }\n    }]);\n\n    return _class40;\n  }(cls.InsertFieldValueBlock);\n\n  cls.MssqlUpdateDeleteOutputBlock = function (_cls$Block17) {\n    _inherits(_class41, _cls$Block17);\n\n    function _class41(options) {\n      _classCallCheck(this, _class41);\n\n      var _this47 = _possibleConstructorReturn(this, Object.getPrototypeOf(_class41).call(this, options));\n\n      _this47._outputs = [];\n      return _this47;\n    }\n\n    /**\n    # Add the given fields to the final result set.\n    #\n    # The parameter is an Object containing field names (or database functions) as the keys and aliases for the fields\n    # as the values. If the value for a key is null then no alias is set for that field.\n    #\n    # Internally this method simply calls the field() method of this block to add each individual field.\n    */\n\n\n    _createClass(_class41, [{\n      key: 'outputs',\n      value: function outputs(_outputs) {\n        for (var output in _outputs) {\n          this.output(output, _outputs[output]);\n        }\n      }\n\n      /**\n      # Add the given field to the final result set.\n      #\n      # The 'field' parameter does not necessarily have to be a fieldname. It can use database functions too,\n      # e.g. DATE_FORMAT(a.started, \"%H\")\n      #\n      # An alias may also be specified for this field.\n      */\n\n    }, {\n      key: 'output',\n      value: function output(_output) {\n        var alias = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n\n        _output = this._sanitizeField(_output);\n        alias = alias ? this._sanitizeFieldAlias(alias) : alias;\n\n        this._outputs.push({\n          name: this.options.forDelete ? 'DELETED.' + _output : 'INSERTED.' + _output,\n          alias: alias\n        });\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString(queryBuilder) {\n        var totalStr = \"\";\n\n        if (this._outputs.length) {\n          var _iteratorNormalCompletion15 = true;\n          var _didIteratorError15 = false;\n          var _iteratorError15 = undefined;\n\n          try {\n            for (var _iterator15 = this._outputs[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {\n              var output = _step15.value;\n\n              totalStr = _pad(totalStr, \", \");\n\n              totalStr += output.name;\n\n              if (output.alias) {\n                totalStr += ' AS ' + this._formatFieldAlias(output.alias);\n              }\n            }\n          } catch (err) {\n            _didIteratorError15 = true;\n            _iteratorError15 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion15 && _iterator15.return) {\n                _iterator15.return();\n              }\n            } finally {\n              if (_didIteratorError15) {\n                throw _iteratorError15;\n              }\n            }\n          }\n\n          totalStr = 'OUTPUT ' + totalStr;\n        }\n\n        return {\n          text: totalStr,\n          values: []\n        };\n      }\n    }]);\n\n    return _class41;\n  }(cls.Block);\n\n  // SELECT query builder.\n  cls.Select = function (_cls$QueryBuilder5) {\n    _inherits(_class42, _cls$QueryBuilder5);\n\n    function _class42(options) {\n      var blocks = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n\n      _classCallCheck(this, _class42);\n\n      var limitOffsetTopBlock = new cls.MssqlLimitOffsetTopBlock(options);\n\n      blocks = blocks || [new cls.StringBlock(options, 'SELECT'), new cls.DistinctBlock(options), limitOffsetTopBlock.TOP(), new cls.GetFieldBlock(options), new cls.FromTableBlock(options), new cls.JoinBlock(options), new cls.WhereBlock(options), new cls.GroupByBlock(options), new cls.OrderByBlock(options), limitOffsetTopBlock.OFFSET(), limitOffsetTopBlock.LIMIT(), new cls.UnionBlock(options)];\n\n      return _possibleConstructorReturn(this, Object.getPrototypeOf(_class42).call(this, options, blocks));\n    }\n\n    return _class42;\n  }(cls.QueryBuilder);\n\n  // Order By in update requires subquery\n\n  // UPDATE query builder.\n  cls.Update = function (_cls$QueryBuilder6) {\n    _inherits(_class43, _cls$QueryBuilder6);\n\n    function _class43(options) {\n      var blocks = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n\n      _classCallCheck(this, _class43);\n\n      blocks = blocks || [new cls.StringBlock(options, 'UPDATE'), new cls.MssqlUpdateTopBlock(options), new cls.UpdateTableBlock(options), new cls.SetFieldBlock(options), new cls.MssqlUpdateDeleteOutputBlock(options), new cls.WhereBlock(options)];\n\n      return _possibleConstructorReturn(this, Object.getPrototypeOf(_class43).call(this, options, blocks));\n    }\n\n    return _class43;\n  }(cls.QueryBuilder);\n\n  // Order By and Limit/Top in delete requires subquery\n\n  // DELETE query builder.\n  cls.Delete = function (_cls$QueryBuilder7) {\n    _inherits(_class44, _cls$QueryBuilder7);\n\n    function _class44(options) {\n      var blocks = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n\n      _classCallCheck(this, _class44);\n\n      blocks = blocks || [new cls.StringBlock(options, 'DELETE'), new cls.TargetTableBlock(options), new cls.FromTableBlock(_extend({}, options, { singleTable: true })), new cls.JoinBlock(options), new cls.MssqlUpdateDeleteOutputBlock(_extend({}, options, { forDelete: true })), new cls.WhereBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options)];\n\n      return _possibleConstructorReturn(this, Object.getPrototypeOf(_class44).call(this, options, blocks));\n    }\n\n    return _class44;\n  }(cls.QueryBuilder);\n\n  // An INSERT query builder.\n  cls.Insert = function (_cls$QueryBuilder8) {\n    _inherits(_class45, _cls$QueryBuilder8);\n\n    function _class45(options) {\n      var blocks = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n\n      _classCallCheck(this, _class45);\n\n      blocks = blocks || [new cls.StringBlock(options, 'INSERT'), new cls.IntoTableBlock(options), new cls.MssqlInsertFieldValueBlock(options), new cls.InsertFieldsFromQueryBlock(options)];\n\n      return _possibleConstructorReturn(this, Object.getPrototypeOf(_class45).call(this, options, blocks));\n    }\n\n    return _class45;\n  }(cls.QueryBuilder);\n};\n\n// This file contains additional Squel commands for use with MySQL\n\nsquel.flavours['mysql'] = function (_squel) {\n  var cls = _squel.cls;\n\n  // ON DUPLICATE KEY UPDATE ...\n  cls.MysqlOnDuplicateKeyUpdateBlock = function (_cls$AbstractSetField3) {\n    _inherits(_class46, _cls$AbstractSetField3);\n\n    function _class46() {\n      _classCallCheck(this, _class46);\n\n      return _possibleConstructorReturn(this, Object.getPrototypeOf(_class46).apply(this, arguments));\n    }\n\n    _createClass(_class46, [{\n      key: 'onDupUpdate',\n      value: function onDupUpdate(field, value, options) {\n        this._set(field, value, options);\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n        var totalStr = \"\",\n            totalValues = [];\n\n        for (var i = 0; i < this._fields.length; ++i) {\n          totalStr = _pad(totalStr, ', ');\n\n          var field = this._fields[i];\n\n          var value = this._values[0][i];\n\n          var valueOptions = this._valueOptions[0][i];\n\n          // e.g. if field is an expression such as: count = count + 1\n          if (typeof value === 'undefined') {\n            totalStr += field;\n          } else {\n            var ret = this._buildString(field + ' = ' + this.options.parameterCharacter, [value], {\n              buildParameterized: options.buildParameterized,\n              formattingOptions: valueOptions\n            });\n\n            totalStr += ret.text;\n            ret.values.forEach(function (value) {\n              return totalValues.push(value);\n            });\n          }\n        }\n\n        return {\n          text: !totalStr.length ? \"\" : 'ON DUPLICATE KEY UPDATE ' + totalStr,\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class46;\n  }(cls.AbstractSetFieldBlock);\n\n  // INSERT query builder.\n  cls.Insert = function (_cls$QueryBuilder9) {\n    _inherits(_class47, _cls$QueryBuilder9);\n\n    function _class47(options) {\n      var blocks = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n\n      _classCallCheck(this, _class47);\n\n      blocks = blocks || [new cls.StringBlock(options, 'INSERT'), new cls.IntoTableBlock(options), new cls.InsertFieldValueBlock(options), new cls.InsertFieldsFromQueryBlock(options), new cls.MysqlOnDuplicateKeyUpdateBlock(options)];\n\n      return _possibleConstructorReturn(this, Object.getPrototypeOf(_class47).call(this, options, blocks));\n    }\n\n    return _class47;\n  }(cls.QueryBuilder);\n\n  // REPLACE query builder.\n  cls.Replace = function (_cls$QueryBuilder10) {\n    _inherits(_class48, _cls$QueryBuilder10);\n\n    function _class48(options) {\n      var blocks = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n\n      _classCallCheck(this, _class48);\n\n      blocks = blocks || [new cls.StringBlock(options, 'REPLACE'), new cls.IntoTableBlock(options), new cls.InsertFieldValueBlock(options), new cls.InsertFieldsFromQueryBlock(options)];\n\n      return _possibleConstructorReturn(this, Object.getPrototypeOf(_class48).call(this, options, blocks));\n    }\n\n    return _class48;\n  }(cls.QueryBuilder);\n\n  _squel.replace = function (options, blocks) {\n    return new cls.Replace(options, blocks);\n  };\n};\n\n// This file contains additional Squel commands for use with the Postgres DB engine\nsquel.flavours['postgres'] = function (_squel) {\n  var cls = _squel.cls;\n\n  cls.DefaultQueryBuilderOptions.numberedParameters = true;\n  cls.DefaultQueryBuilderOptions.numberedParametersStartAt = 1;\n  cls.DefaultQueryBuilderOptions.autoQuoteAliasNames = false;\n  cls.DefaultQueryBuilderOptions.useAsForTableAliasNames = true;\n\n  cls.PostgresOnConflictKeyUpdateBlock = function (_cls$AbstractSetField4) {\n    _inherits(_class49, _cls$AbstractSetField4);\n\n    function _class49() {\n      _classCallCheck(this, _class49);\n\n      return _possibleConstructorReturn(this, Object.getPrototypeOf(_class49).apply(this, arguments));\n    }\n\n    _createClass(_class49, [{\n      key: 'onConflict',\n      value: function onConflict(index, fields) {\n        var _this56 = this;\n\n        this._dupIndex = this._sanitizeField(index);\n\n        if (fields) {\n          Object.keys(fields).forEach(function (key) {\n            _this56._set(key, fields[key]);\n          });\n        }\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n        var totalStr = \"\",\n            totalValues = [];\n\n        for (var i = 0; i < this._fields.length; ++i) {\n          totalStr = _pad(totalStr, ', ');\n\n          var field = this._fields[i];\n\n          var value = this._values[0][i];\n\n          var valueOptions = this._valueOptions[0][i];\n\n          // e.g. if field is an expression such as: count = count + 1\n          if (typeof value === 'undefined') {\n            totalStr += field;\n          } else {\n            var ret = this._buildString(field + ' = ' + this.options.parameterCharacter, [value], {\n              buildParameterized: options.buildParameterized,\n              formattingOptions: valueOptions\n            });\n\n            totalStr += ret.text;\n            ret.values.forEach(function (value) {\n              return totalValues.push(value);\n            });\n          }\n        }\n\n        return {\n          text: this._dupIndex ? 'ON CONFLICT (' + this._dupIndex + ') DO ' + (!totalStr.length ? \"NOTHING\" : 'UPDATE SET ' + totalStr) : '',\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class49;\n  }(cls.AbstractSetFieldBlock);\n\n  // RETURNING\n  cls.ReturningBlock = function (_cls$Block18) {\n    _inherits(_class50, _cls$Block18);\n\n    function _class50(options) {\n      _classCallCheck(this, _class50);\n\n      var _this57 = _possibleConstructorReturn(this, Object.getPrototypeOf(_class50).call(this, options));\n\n      _this57._fields = [];\n      return _this57;\n    }\n\n    _createClass(_class50, [{\n      key: 'returning',\n      value: function returning(field) {\n        var alias = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n        var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n        alias = alias ? this._sanitizeFieldAlias(alias) : alias;\n        field = this._sanitizeField(field);\n\n        // if field-alias combo already present then don't add\n        var existingField = this._fields.filter(function (f) {\n          return f.name === field && f.alias === alias;\n        });\n        if (existingField.length) {\n          return this;\n        }\n\n        this._fields.push({\n          name: field,\n          alias: alias,\n          options: options\n        });\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n        var queryBuilder = options.queryBuilder;\n        var buildParameterized = options.buildParameterized;\n\n\n        var totalStr = '',\n            totalValues = [];\n\n        var _iteratorNormalCompletion16 = true;\n        var _didIteratorError16 = false;\n        var _iteratorError16 = undefined;\n\n        try {\n          for (var _iterator16 = this._fields[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {\n            var field = _step16.value;\n\n            totalStr = _pad(totalStr, \", \");\n\n            var name = field.name;\n            var alias = field.alias;\n            var _options2 = field.options;\n\n\n            if (typeof name === 'string') {\n              totalStr += this._formatFieldName(name, _options2);\n            } else {\n              var ret = name._toParamString({\n                nested: true,\n                buildParameterized: buildParameterized\n              });\n\n              totalStr += ret.text;\n              ret.values.forEach(function (value) {\n                return totalValues.push(value);\n              });\n            }\n\n            if (alias) {\n              totalStr += ' AS ' + this._formatFieldAlias(alias);\n            }\n          }\n        } catch (err) {\n          _didIteratorError16 = true;\n          _iteratorError16 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion16 && _iterator16.return) {\n              _iterator16.return();\n            }\n          } finally {\n            if (_didIteratorError16) {\n              throw _iteratorError16;\n            }\n          }\n        }\n\n        return {\n          text: totalStr.length > 0 ? 'RETURNING ' + totalStr : '',\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class50;\n  }(cls.Block);\n\n  // WITH\n  cls.WithBlock = function (_cls$Block19) {\n    _inherits(_class51, _cls$Block19);\n\n    function _class51(options) {\n      _classCallCheck(this, _class51);\n\n      var _this58 = _possibleConstructorReturn(this, Object.getPrototypeOf(_class51).call(this, options));\n\n      _this58._tables = [];\n      return _this58;\n    }\n\n    _createClass(_class51, [{\n      key: 'with',\n      value: function _with(alias, table) {\n        this._tables.push({ alias: alias, table: table });\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n        var parts = [];\n        var values = [];\n\n        var _iteratorNormalCompletion17 = true;\n        var _didIteratorError17 = false;\n        var _iteratorError17 = undefined;\n\n        try {\n          for (var _iterator17 = this._tables[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {\n            var _step17$value = _step17.value;\n            var alias = _step17$value.alias;\n            var table = _step17$value.table;\n\n            var ret = table._toParamString({\n              buildParameterized: options.buildParameterized,\n              nested: true\n            });\n\n            parts.push(alias + ' AS ' + ret.text);\n            ret.values.forEach(function (value) {\n              return values.push(value);\n            });\n          }\n        } catch (err) {\n          _didIteratorError17 = true;\n          _iteratorError17 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion17 && _iterator17.return) {\n              _iterator17.return();\n            }\n          } finally {\n            if (_didIteratorError17) {\n              throw _iteratorError17;\n            }\n          }\n        }\n\n        return {\n          text: parts.length ? 'WITH ' + parts.join(', ') : '',\n          values: values\n        };\n      }\n    }]);\n\n    return _class51;\n  }(cls.Block);\n\n  // DISTINCT [ON]\n  cls.DistinctOnBlock = function (_cls$Block20) {\n    _inherits(_class52, _cls$Block20);\n\n    function _class52(options) {\n      _classCallCheck(this, _class52);\n\n      var _this59 = _possibleConstructorReturn(this, Object.getPrototypeOf(_class52).call(this, options));\n\n      _this59._distinctFields = [];\n      return _this59;\n    }\n\n    _createClass(_class52, [{\n      key: 'distinct',\n      value: function distinct() {\n        var _this60 = this;\n\n        this._useDistinct = true;\n\n        // Add all fields to the DISTINCT ON clause.\n\n        for (var _len11 = arguments.length, fields = Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n          fields[_key11] = arguments[_key11];\n        }\n\n        fields.forEach(function (field) {\n          _this60._distinctFields.push(_this60._sanitizeField(field));\n        });\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var text = '';\n\n        if (this._useDistinct) {\n          text = 'DISTINCT';\n\n          if (this._distinctFields.length) {\n            text += ' ON (' + this._distinctFields.join(', ') + ')';\n          }\n        }\n\n        return {\n          text: text,\n          values: []\n        };\n      }\n    }]);\n\n    return _class52;\n  }(cls.Block);\n\n  // SELECT query builder.\n  cls.Select = function (_cls$QueryBuilder11) {\n    _inherits(_class53, _cls$QueryBuilder11);\n\n    function _class53(options) {\n      var blocks = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n\n      _classCallCheck(this, _class53);\n\n      blocks = blocks || [new cls.WithBlock(options), new cls.StringBlock(options, 'SELECT'), new cls.FunctionBlock(options), new cls.DistinctOnBlock(options), new cls.GetFieldBlock(options), new cls.FromTableBlock(options), new cls.JoinBlock(options), new cls.WhereBlock(options), new cls.GroupByBlock(options), new cls.HavingBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options), new cls.OffsetBlock(options), new cls.UnionBlock(options)];\n\n      return _possibleConstructorReturn(this, Object.getPrototypeOf(_class53).call(this, options, blocks));\n    }\n\n    return _class53;\n  }(cls.QueryBuilder);\n\n  // INSERT query builder\n  cls.Insert = function (_cls$QueryBuilder12) {\n    _inherits(_class54, _cls$QueryBuilder12);\n\n    function _class54(options) {\n      var blocks = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n\n      _classCallCheck(this, _class54);\n\n      blocks = blocks || [new cls.WithBlock(options), new cls.StringBlock(options, 'INSERT'), new cls.IntoTableBlock(options), new cls.InsertFieldValueBlock(options), new cls.InsertFieldsFromQueryBlock(options), new cls.PostgresOnConflictKeyUpdateBlock(options), new cls.ReturningBlock(options)];\n\n      return _possibleConstructorReturn(this, Object.getPrototypeOf(_class54).call(this, options, blocks));\n    }\n\n    return _class54;\n  }(cls.QueryBuilder);\n\n  // UPDATE query builder\n  cls.Update = function (_cls$QueryBuilder13) {\n    _inherits(_class55, _cls$QueryBuilder13);\n\n    function _class55(options) {\n      var blocks = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n\n      _classCallCheck(this, _class55);\n\n      blocks = blocks || [new cls.WithBlock(options), new cls.StringBlock(options, 'UPDATE'), new cls.UpdateTableBlock(options), new cls.SetFieldBlock(options), new cls.FromTableBlock(options), new cls.WhereBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options), new cls.ReturningBlock(options)];\n\n      return _possibleConstructorReturn(this, Object.getPrototypeOf(_class55).call(this, options, blocks));\n    }\n\n    return _class55;\n  }(cls.QueryBuilder);\n\n  // DELETE query builder\n  cls.Delete = function (_cls$QueryBuilder14) {\n    _inherits(_class56, _cls$QueryBuilder14);\n\n    function _class56(options) {\n      var blocks = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n\n      _classCallCheck(this, _class56);\n\n      blocks = blocks || [new cls.WithBlock(options), new cls.StringBlock(options, 'DELETE'), new cls.TargetTableBlock(options), new cls.FromTableBlock(_extend({}, options, {\n        singleTable: true\n      })), new cls.JoinBlock(options), new cls.WhereBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options), new cls.ReturningBlock(options)];\n\n      return _possibleConstructorReturn(this, Object.getPrototypeOf(_class56).call(this, options, blocks));\n    }\n\n    return _class56;\n  }(cls.QueryBuilder);\n};\nreturn squel;\n}));\n","/home/travis/build/npmtest/node-npmtest-squel/node_modules/squel/gulpfile.js":"require('coffee-script/register');\n\nconst gulp = require('gulp'),\n  istanbul = require('gulp-istanbul'),\n  umd = require('gulp-umd'),\n  path = require('path'),\n  concat = require('gulp-concat'),\n  insert = require('gulp-insert'),\n  mocha = require('gulp-mocha'),\n  babel = require('gulp-babel'),\n  replace = require('gulp-replace'),\n  uglify = require('gulp-uglify'),\n  runSequence = require('run-sequence'),\n  argv = require('yargs').argv;\n\n\nconst onlyTest = argv.onlyTest || argv.limitTest;\n\n\nconst SQUEL_VERSION = require('./package.json').version;\n\n\ngulp.task('build-basic', function() {\n\n  return gulp.src([\n      './src/core.js',\n    ])\n    .pipe( concat('squel-basic.js') )\n    .pipe( replace(/<<VERSION_STRING>>/i, SQUEL_VERSION) )\n    .pipe( babel({\n      presets: ['es2015']\n    }) )\n    .pipe( umd({\n      exports: function (file) {\n        return 'squel';\n      },\n      namespace: function(file) {\n        return 'squel';\n      }\n    }))\n    .pipe( gulp.dest('./dist') )\n    .pipe( uglify() )\n    .pipe( insert.prepend('/*! squel | https://github.com/hiddentao/squel | BSD license */') )\n    .pipe( concat('squel-basic.min.js') )\n    .pipe( gulp.dest('./dist') )\n});\n\n\ngulp.task('build-full', function() {\n  return gulp.src([\n      './src/core.js',\n      './src/mssql.js',\n      './src/mysql.js',\n      './src/postgres.js',\n    ])\n    .pipe( concat('squel.js') )\n    .pipe( replace(/<<VERSION_STRING>>/i, SQUEL_VERSION) )\n    .pipe( babel({\n      presets: ['es2015']\n    }) )\n    .pipe( umd({\n      exports: function (file) {\n        return 'squel';\n      },\n      namespace: function(file) {\n        return 'squel';\n      }\n    }))\n    .pipe( gulp.dest('./dist') )\n    .pipe( uglify() )\n    .pipe( insert.prepend('/*! squel | https://github.com/hiddentao/squel | BSD license */') )\n    .pipe( concat('squel.min.js') )\n    .pipe( gulp.dest('./dist') )\n});\n\n\ngulp.task('build', ['build-basic', 'build-full']);\n\n\ngulp.task('pre-test', function () {\n  return gulp.src(['dist/*.js'])\n    .pipe(istanbul())\n    .pipe(istanbul.hookRequire());\n});\n\n\ngulp.task('test', ['pre-test'], function () {\n  return gulp.src(onlyTest || [\n      './test/baseclasses.test.coffee',\n      './test/blocks.test.coffee',\n      './test/case.test.coffee',\n      './test/custom.test.coffee',\n      './test/delete.test.coffee',\n      './test/expressions.test.coffee',\n      './test/insert.test.coffee',\n      './test/select.test.coffee',\n      './test/update.test.coffee',\n      './test/mssql.test.coffee',\n      './test/mysql.test.coffee',\n      './test/postgres.test.coffee',\n    ], { read: false })\n      .pipe(mocha({\n        ui: 'exports',\n        reporter: 'spec',\n      }))\n      .pipe(istanbul.writeReports({\n        dir: './test-coverage',\n      }))\n      // .pipe(istanbul.enforceThresholds({ thresholds: { global: 90 } }))\n    ;\n});\n\n\n\ngulp.task('default', function(cb) {\n  runSequence(['build'], 'test', cb);\n});\n\n\n\n"}